<?xml version="1.0"?>
<doc>
    <assembly>
        <name>MongoDB.Entities</name>
    </assembly>
    <members>
        <member name="T:MongoDB.Entities.Find`1">
            <summary>
            Represents a MongoDB Find command.
            <para>TIP: Specify your criteria using .Match() .Sort() .Skip() .Take() .Project() .Option() methods and finally call .Execute()</para>
            <para>Note: For building queries, use the DB.Fluent* interfaces</para>
            </summary>
            <typeparam name="T">Any class that implements IEntity</typeparam>
        </member>
        <member name="T:MongoDB.Entities.Find`2">
            <summary>
            Represents a MongoDB Find command with the ability to project to a different result type.
            <para>TIP: Specify your criteria using .Match() .Sort() .Skip() .Take() .Project() .Option() methods and finally call .Execute()</para>
            </summary>
            <typeparam name="T">Any class that implements IEntity</typeparam>
            <typeparam name="TProjection">The type you'd like to project the results to.</typeparam>
        </member>
        <member name="M:MongoDB.Entities.Find`2.OneAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Find a single IEntity by ID
            </summary>
            <param name="ID">The unique ID of an IEntity</param>
            <param name="cancellation">An optional cancellation token</param>
            <returns>A single entity or null if not found</returns>
        </member>
        <member name="M:MongoDB.Entities.Find`2.ManyAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Threading.CancellationToken)">
            <summary>
            Find entities by supplying a lambda expression
            </summary>
            <param name="expression">x => x.Property == Value</param>
            <param name="cancellation">An optional cancellation token</param>
            <returns>A list of Entities</returns>
        </member>
        <member name="M:MongoDB.Entities.Find`2.ManyAsync(System.Func{MongoDB.Driver.FilterDefinitionBuilder{`0},MongoDB.Driver.FilterDefinition{`0}},System.Threading.CancellationToken)">
            <summary>
            Find entities by supplying a filter expression
            </summary>
            <param name="filter">f => f.Eq(x => x.Prop, Value) &amp; f.Gt(x => x.Prop, Value)</param>
            <param name="cancellation">An optional cancellation token</param>
            <returns>A list of Entities</returns>
        </member>
        <member name="M:MongoDB.Entities.Find`2.MatchID(System.String)">
            <summary>
            Specify an IEntity ID as the matching criteria
            </summary>
            <param name="ID">A unique IEntity ID</param>
        </member>
        <member name="M:MongoDB.Entities.Find`2.Match(System.String)">
            <summary>
            Specify an IEntity ID as the matching criteria
            </summary>
            <param name="ID">A unique IEntity ID</param>
        </member>
        <member name="M:MongoDB.Entities.Find`2.Match(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Specify the matching criteria with a lambda expression
            </summary>
            <param name="expression">x => x.Property == Value</param>
        </member>
        <member name="M:MongoDB.Entities.Find`2.Match(System.Func{MongoDB.Driver.FilterDefinitionBuilder{`0},MongoDB.Driver.FilterDefinition{`0}})">
            <summary>
            Specify the matching criteria with a filter expression
            </summary>
            <param name="filter">f => f.Eq(x => x.Prop, Value) &amp; f.Gt(x => x.Prop, Value)</param>
        </member>
        <member name="M:MongoDB.Entities.Find`2.Match(MongoDB.Entities.Template)">
            <summary>
            Specify the matching criteria with a template
            </summary>
            <param name="template">A Template with a find query</param>
        </member>
        <member name="M:MongoDB.Entities.Find`2.Match(MongoDB.Entities.Search,System.String,System.Boolean,System.Boolean,System.String)">
            <summary>
            Specify a search term to find results from the text index of this particular collection.
            <para>TIP: Make sure to define a text index with DB.Index&lt;T&gt;() before searching</para>
            </summary>
            <param name="searchType">The type of text matching to do</param>
            <param name="searchTerm">The search term</param>
            <param name="caseSensitive">Case sensitivity of the search (optional)</param>
            <param name="diacriticSensitive">Diacritic sensitivity of the search (optional)</param>
            <param name="language">The language for the search (optional)</param>
        </member>
        <member name="M:MongoDB.Entities.Find`2.Match(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},MongoDB.Entities.Coordinates2D,System.Nullable{System.Double},System.Nullable{System.Double})">
            <summary>
            Specify criteria for matching entities based on GeoSpatial data (longitude &amp; latitude)
            <para>TIP: Make sure to define a Geo2DSphere index with DB.Index&lt;T&gt;() before searching</para>
            <para>Note: DB.FluentGeoNear() supports more advanced options</para>
            </summary>
            <param name="coordinatesProperty">The property where 2DCoordinates are stored</param>
            <param name="nearCoordinates">The search point</param>
            <param name="maxDistance">Maximum distance in meters from the search point</param>
            <param name="minDistance">Minimum distance in meters from the search point</param>
        </member>
        <member name="M:MongoDB.Entities.Find`2.MatchString(System.String)">
            <summary>
            Specify the matching criteria with a JSON string
            </summary>
            <param name="jsonString">{ Title : 'The Power Of Now' }</param>
        </member>
        <member name="M:MongoDB.Entities.Find`2.MatchExpression(System.String)">
            <summary>
            Specify the matching criteria with an aggregation expression (i.e. $expr)
            </summary>
            <param name="expression">{ $gt: ['$Property1', '$Property2'] }</param>
        </member>
        <member name="M:MongoDB.Entities.Find`2.MatchExpression(MongoDB.Entities.Template)">
            <summary>
            Specify the matching criteria with a Template
            </summary>
            <param name="template">A Template object</param>
        </member>
        <member name="M:MongoDB.Entities.Find`2.Sort(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},MongoDB.Entities.Order)">
            <summary>
            Specify which property and order to use for sorting (use multiple times if needed)
            </summary>
            <param name="propertyToSortBy">x => x.Prop</param>
            <param name="sortOrder">The sort order</param>
        </member>
        <member name="M:MongoDB.Entities.Find`2.SortByTextScore">
            <summary>
            Sort the results of a text search by the MetaTextScore
            <para>TIP: Use this method after .Project() if you need to do a projection also</para>
            </summary>
        </member>
        <member name="M:MongoDB.Entities.Find`2.SortByTextScore(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>
            Sort the results of a text search by the MetaTextScore and get back the score as well
            <para>TIP: Use this method after .Project() if you need to do a projection also</para>
            </summary>
            <param name="scoreProperty">x => x.TextScoreProp</param>
        </member>
        <member name="M:MongoDB.Entities.Find`2.Sort(System.Func{MongoDB.Driver.SortDefinitionBuilder{`0},MongoDB.Driver.SortDefinition{`0}})">
            <summary>
            Specify how to sort using a sort expression
            </summary>
            <param name="sortFunction">s => s.Ascending("Prop1").MetaTextScore("Prop2")</param>
            <returns></returns>
        </member>
        <member name="M:MongoDB.Entities.Find`2.Skip(System.Int32)">
            <summary>
            Specify how many entities to skip
            </summary>
            <param name="skipCount">The number to skip</param>
        </member>
        <member name="M:MongoDB.Entities.Find`2.Limit(System.Int32)">
            <summary>
            Specify how many entities to Take/Limit
            </summary>
            <param name="takeCount">The number to limit/take</param>
        </member>
        <member name="M:MongoDB.Entities.Find`2.Project(System.Linq.Expressions.Expression{System.Func{`0,`1}})">
            <summary>
            Specify how to project the results using a lambda expression
            </summary>
            <param name="expression">x => new Test { PropName = x.Prop }</param>
        </member>
        <member name="M:MongoDB.Entities.Find`2.Project(System.Func{MongoDB.Driver.ProjectionDefinitionBuilder{`0},MongoDB.Driver.ProjectionDefinition{`0,`1}})">
            <summary>
            Specify how to project the results using a projection expression
            </summary>
            <param name="projection">p => p.Include("Prop1").Exclude("Prop2")</param>
        </member>
        <member name="M:MongoDB.Entities.Find`2.ProjectExcluding(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>
            Specify how to project the results using an exclusion projection expression.
            </summary>
            <param name="exclusion">x => new { x.PropToExclude, x.AnotherPropToExclude }</param>
        </member>
        <member name="M:MongoDB.Entities.Find`2.Option(System.Action{MongoDB.Driver.FindOptions{`0,`1}})">
            <summary>
            Specify an option for this find command (use multiple times if needed)
            </summary>
            <param name="option">x => x.OptionName = OptionValue</param>
        </member>
        <member name="M:MongoDB.Entities.Find`2.ExecuteAsync(System.Threading.CancellationToken)">
            <summary>
            Run the Find command in MongoDB server and get a list of results
            </summary>
            <param name="cancellation">An optional cancellation token</param>
        </member>
        <member name="M:MongoDB.Entities.Find`2.ExecuteSingleAsync(System.Threading.CancellationToken)">
            <summary>
            Run the Find command in MongoDB server and get a single result or the default value if not found.
            If more than one entity is found, it will throw an exception.
            </summary>
            <param name="cancellation">An optional cancellation token</param>
        </member>
        <member name="M:MongoDB.Entities.Find`2.ExecuteFirstAsync(System.Threading.CancellationToken)">
            <summary>
            Run the Find command in MongoDB server and get the first result or the default value if not found
            </summary>
            <param name="cancellation">An optional cancellation token</param>
        </member>
        <member name="M:MongoDB.Entities.Find`2.ExecuteCursorAsync(System.Threading.CancellationToken)">
            <summary>
            Run the Find command in MongoDB server and get a cursor instead of materialized results
            </summary>
            <param name="cancellation">An optional cancellation token</param>
        </member>
        <member name="T:MongoDB.Entities.Index`1">
            <summary>
            Represents an index creation command
            <para>TIP: Define the keys first with .Key() method and finally call the .Create() method.</para>
            </summary>
            <typeparam name="T">Any class that implements IEntity</typeparam>
        </member>
        <member name="M:MongoDB.Entities.Index`1.CreateAsync(System.Threading.CancellationToken)">
            <summary>
            Call this method to finalize defining the index after setting the index keys and options.
            </summary>
            <param name="cancellation">An optional cancellation token</param>
            <returns>The name of the created index</returns>
        </member>
        <member name="M:MongoDB.Entities.Index`1.Option(System.Action{MongoDB.Driver.CreateIndexOptions{`0}})">
            <summary>
            Set the options for this index definition
            <para>TIP: Setting options is not required.</para>
            </summary>
            <param name="option">x => x.OptionName = OptionValue</param>
        </member>
        <member name="M:MongoDB.Entities.Index`1.Key(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},MongoDB.Entities.KeyType)">
            <summary>
            Adds a key definition to the index
            <para>TIP: At least one key definition is required</para>
            </summary>
            <param name="propertyToIndex">x => x.PropertyName</param>
            <param name="type">The type of the key</param>
        </member>
        <member name="M:MongoDB.Entities.Index`1.DropAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Drops an index by name for this entity type
            </summary>
            <param name="name">The name of the index to drop</param>
            <param name="cancellation">An optional cancellation token</param>
        </member>
        <member name="M:MongoDB.Entities.Index`1.DropAllAsync(System.Threading.CancellationToken)">
            <summary>
            Drops all indexes for this entity type
            </summary>
            <param name="cancellation">An optional cancellation token</param>
        </member>
        <member name="T:MongoDB.Entities.Update`1">
            <summary>
            Represents an update command
            <para>TIP: Specify a filter first with the .Match(). Then set property values with .Modify() and finally call .Execute() to run the command.</para>
            </summary>
            <typeparam name="T">Any class that implements IEntity</typeparam>
        </member>
        <member name="M:MongoDB.Entities.Update`1.MatchID(System.String)">
            <summary>
            Specify an IEntity ID as the matching criteria
            </summary>
            <param name="ID">A unique IEntity ID</param>
        </member>
        <member name="M:MongoDB.Entities.Update`1.Match(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Specify the IEntity matching criteria with a lambda expression
            </summary>
            <param name="expression">A lambda expression to select the Entities to update</param>
        </member>
        <member name="M:MongoDB.Entities.Update`1.Match(System.Func{MongoDB.Driver.FilterDefinitionBuilder{`0},MongoDB.Driver.FilterDefinition{`0}})">
            <summary>
            Specify the Entity matching criteria with a filter expression
            </summary>
            <param name="filter">f => f.Eq(x => x.Prop, Value) &amp; f.Gt(x => x.Prop, Value)</param>
        </member>
        <member name="M:MongoDB.Entities.Update`1.Match(MongoDB.Entities.Template)">
            <summary>
            Specify the Entity matching criteria with a Template
            </summary>
            <param name="template">The filter Template</param>
        </member>
        <member name="M:MongoDB.Entities.Update`1.Match(System.String)">
            <summary>
            Specify the Entity matching criteria with a JSON string
            </summary>
            <param name="jsonString">{ Title : 'The Power Of Now' }</param>
        </member>
        <member name="M:MongoDB.Entities.Update`1.Modify``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},``0)">
            <summary>
            Specify the property and it's value to modify (use multiple times if needed)
            </summary>
            <param name="property">x => x.Property</param>
            <param name="value">The value to set on the property</param>
            <returns></returns>
        </member>
        <member name="M:MongoDB.Entities.Update`1.Modify(System.Func{MongoDB.Driver.UpdateDefinitionBuilder{`0},MongoDB.Driver.UpdateDefinition{`0}})">
            <summary>
            Specify the update definition builder operation to modify the Entities (use multiple times if needed)
            </summary>
            <param name="operation">b => b.Inc(x => x.PropName, Value)</param>
            <returns></returns>
        </member>
        <member name="M:MongoDB.Entities.Update`1.Modify(System.String)">
            <summary>
            Specify an update (json string) to modify the Entities (use multiple times if needed)
            </summary>
            <param name="update">{ $set: { 'RootProp.$[x].SubProp' : 321 } }</param>
        </member>
        <member name="M:MongoDB.Entities.Update`1.Modify(MongoDB.Entities.Template)">
            <summary>
            Specify an update with a Template to modify the Entities (use multiple times if needed)
            </summary>
            <param name="template">A Template with a single update</param>
        </member>
        <member name="M:MongoDB.Entities.Update`1.WithPipeline(MongoDB.Entities.Template)">
            <summary>
            Specify an update pipeline with multiple stages using a Template to modify the Entities.
            <para>NOTE: pipeline updates and regular updates cannot be used together.</para>
            </summary>
            <param name="template">A Template object containing multiple pipeline stages</param>
        </member>
        <member name="M:MongoDB.Entities.Update`1.WithPipelineStage(System.String)">
            <summary>
            Specify an update pipeline stage to modify the Entities (use multiple times if needed)
            <para>NOTE: pipeline updates and regular updates cannot be used together.</para>
            </summary>
            <param name="stage">{ $set: { FullName: { $concat: ['$Name', ' ', '$Surname'] } } }</param>
        </member>
        <member name="M:MongoDB.Entities.Update`1.WithPipelineStage(MongoDB.Entities.Template)">
            <summary>
            Specify an update pipeline stage using a Template to modify the Entities (use multiple times if needed)
            <para>NOTE: pipeline updates and regular updates cannot be used together.</para>
            </summary>
            <param name="template">A Template object containing a pipeline stage</param>
        </member>
        <member name="M:MongoDB.Entities.Update`1.WithArrayFilter(System.String)">
            <summary>
            Specify an array filter to target nested entities for updates (use multiple times if needed).
            </summary>
            <param name="filter">{ 'x.SubProp': { $gte: 123 } }</param>
        </member>
        <member name="M:MongoDB.Entities.Update`1.WithArrayFilter(MongoDB.Entities.Template)">
            <summary>
            Specify a single array filter using a Template to target nested entities for updates
            </summary>
            <param name="template"></param>
        </member>
        <member name="M:MongoDB.Entities.Update`1.WithArrayFilters(MongoDB.Entities.Template)">
            <summary>
            Specify multiple array filters with a Template to target nested entities for updates.
            </summary>
            <param name="template">The template with an array [...] of filters</param>
        </member>
        <member name="M:MongoDB.Entities.Update`1.Option(System.Action{MongoDB.Driver.UpdateOptions})">
            <summary>
            Specify an option for this update command (use multiple times if needed)
            <para>TIP: Setting options is not required</para>
            </summary>
            <param name="option">x => x.OptionName = OptionValue</param>
        </member>
        <member name="M:MongoDB.Entities.Update`1.AddToQueue">
            <summary>
            Queue up an update command for bulk execution later.
            </summary>
        </member>
        <member name="M:MongoDB.Entities.Update`1.ExecuteAsync(System.Threading.CancellationToken)">
            <summary>
            Run the update command in MongoDB.
            </summary>
            <param name="cancellation">An optional cancellation token</param>
        </member>
        <member name="M:MongoDB.Entities.Update`1.ExecutePipelineAsync(System.Threading.CancellationToken)">
            <summary>
            Run the update command with pipeline stages
            </summary>
            <param name="cancellation">An optional cancellation token</param>
        </member>
        <member name="T:MongoDB.Entities.UpdateAndGet`1">
            <summary>
            Update and retrieve the first document that was updated.
            <para>TIP: Specify a filter first with the .Match(). Then set property values with .Modify() and finally call .Execute() to run the command.</para>
            </summary>
            <typeparam name="T">Any class that implements IEntity</typeparam>
        </member>
        <member name="T:MongoDB.Entities.UpdateAndGet`2">
            <summary>
            Update and retrieve the first document that was updated.
            <para>TIP: Specify a filter first with the .Match(). Then set property values with .Modify() and finally call .Execute() to run the command.</para>
            </summary>
            <typeparam name="T">Any class that implements IEntity</typeparam>
            <typeparam name="TProjection">The type to project to</typeparam>
        </member>
        <member name="M:MongoDB.Entities.UpdateAndGet`2.MatchID(System.String)">
            <summary>
            Specify an IEntity ID as the matching criteria
            </summary>
            <param name="ID">A unique IEntity ID</param>
        </member>
        <member name="M:MongoDB.Entities.UpdateAndGet`2.Match(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Specify the IEntity matching criteria with a lambda expression
            </summary>
            <param name="expression">A lambda expression to select the Entities to update</param>
        </member>
        <member name="M:MongoDB.Entities.UpdateAndGet`2.Match(System.Func{MongoDB.Driver.FilterDefinitionBuilder{`0},MongoDB.Driver.FilterDefinition{`0}})">
            <summary>
            Specify the Entity matching criteria with a filter expression
            </summary>
            <param name="filter">f => f.Eq(x => x.Prop, Value) &amp; f.Gt(x => x.Prop, Value)</param>
        </member>
        <member name="M:MongoDB.Entities.UpdateAndGet`2.Match(MongoDB.Entities.Template)">
            <summary>
            Specify the Entity matching criteria with a Template
            </summary>
            <param name="template">The filter Template</param>
        </member>
        <member name="M:MongoDB.Entities.UpdateAndGet`2.Match(System.String)">
            <summary>
            Specify the Entity matching criteria with a JSON string
            </summary>
            <param name="jsonString">{ Title : 'The Power Of Now' }</param>
        </member>
        <member name="M:MongoDB.Entities.UpdateAndGet`2.Modify``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},``0)">
            <summary>
            Specify the property and it's value to modify (use multiple times if needed)
            </summary>
            <param name="property">x => x.Property</param>
            <param name="value">The value to set on the property</param>
        </member>
        <member name="M:MongoDB.Entities.UpdateAndGet`2.Modify(System.Func{MongoDB.Driver.UpdateDefinitionBuilder{`0},MongoDB.Driver.UpdateDefinition{`0}})">
            <summary>
            Specify the update definition builder operation to modify the Entities (use multiple times if needed)
            </summary>
            <param name="operation">b => b.Inc(x => x.PropName, Value)</param>
        </member>
        <member name="M:MongoDB.Entities.UpdateAndGet`2.Modify(System.String)">
            <summary>
            Specify an update (json string) to modify the Entities (use multiple times if needed)
            </summary>
            <param name="update">{ $set: { 'RootProp.$[x].SubProp' : 321 } }</param>
        </member>
        <member name="M:MongoDB.Entities.UpdateAndGet`2.Modify(MongoDB.Entities.Template)">
            <summary>
            Specify an update with a Template to modify the Entities (use multiple times if needed)
            </summary>
            <param name="template">A Template with a single update</param>
        </member>
        <member name="M:MongoDB.Entities.UpdateAndGet`2.WithPipeline(MongoDB.Entities.Template)">
            <summary>
            Specify an update pipeline with multiple stages using a Template to modify the Entities.
            <para>NOTE: pipeline updates and regular updates cannot be used together.</para>
            </summary>
            <param name="template">A Template object containing multiple pipeline stages</param>
        </member>
        <member name="M:MongoDB.Entities.UpdateAndGet`2.WithPipelineStage(System.String)">
            <summary>
            Specify an update pipeline stage to modify the Entities (use multiple times if needed)
            <para>NOTE: pipeline updates and regular updates cannot be used together.</para>
            </summary>
            <param name="stage">{ $set: { FullName: { $concat: ['$Name', ' ', '$Surname'] } } }</param>
        </member>
        <member name="M:MongoDB.Entities.UpdateAndGet`2.WithPipelineStage(MongoDB.Entities.Template)">
            <summary>
            Specify an update pipeline stage using a Template to modify the Entities (use multiple times if needed)
            <para>NOTE: pipeline updates and regular updates cannot be used together.</para>
            </summary>
            <param name="template">A Template object containing a pipeline stage</param>
        </member>
        <member name="M:MongoDB.Entities.UpdateAndGet`2.WithArrayFilter(System.String)">
            <summary>
            Specify an array filter to target nested entities for updates (use multiple times if needed).
            </summary>
            <param name="filter">{ 'x.SubProp': { $gte: 123 } }</param>
        </member>
        <member name="M:MongoDB.Entities.UpdateAndGet`2.WithArrayFilter(MongoDB.Entities.Template)">
            <summary>
            Specify a single array filter using a Template to target nested entities for updates
            </summary>
            <param name="template"></param>
        </member>
        <member name="M:MongoDB.Entities.UpdateAndGet`2.WithArrayFilters(MongoDB.Entities.Template)">
            <summary>
            Specify multiple array filters with a Template to target nested entities for updates.
            </summary>
            <param name="template">The template with an array [...] of filters</param>
        </member>
        <member name="M:MongoDB.Entities.UpdateAndGet`2.Option(System.Action{MongoDB.Driver.FindOneAndUpdateOptions{`0,`1}})">
            <summary>
            Specify an option for this update command (use multiple times if needed)
            <para>TIP: Setting options is not required</para>
            </summary>
            <param name="option">x => x.OptionName = OptionValue</param>
        </member>
        <member name="M:MongoDB.Entities.UpdateAndGet`2.Project(System.Linq.Expressions.Expression{System.Func{`0,`1}})">
            <summary>
            Specify how to project the results using a lambda expression
            </summary>
            <param name="expression">x => new Test { PropName = x.Prop }</param>
        </member>
        <member name="M:MongoDB.Entities.UpdateAndGet`2.Project(System.Func{MongoDB.Driver.ProjectionDefinitionBuilder{`0},MongoDB.Driver.ProjectionDefinition{`0,`1}})">
            <summary>
            Specify how to project the results using a projection expression
            </summary>
            <param name="projection">p => p.Include("Prop1").Exclude("Prop2")</param>
        </member>
        <member name="M:MongoDB.Entities.UpdateAndGet`2.ExecuteAsync(System.Threading.CancellationToken)">
            <summary>
            Run the update command in MongoDB and retrieve the first document modified
            </summary>
            <param name="cancellation">An optional cancellation token</param>
        </member>
        <member name="M:MongoDB.Entities.UpdateAndGet`2.ExecutePipelineAsync(System.Threading.CancellationToken)">
            <summary>
            Run the update command with pipeline stages and retrieve the first document modified
            </summary>
            <param name="cancellation">An optional cancellation token</param>
        </member>
        <member name="T:MongoDB.Entities.Watcher`1">
            <summary>
            Watcher for subscribing to mongodb change streams.
            </summary>
            <typeparam name="T">The type of entity</typeparam>
        </member>
        <member name="E:MongoDB.Entities.Watcher`1.OnChanges">
            <summary>
            This event is fired when the desired types of events have occured. Will have a list of entities that was received as input.
            </summary>
        </member>
        <member name="E:MongoDB.Entities.Watcher`1.OnError">
            <summary>
            This event is fired when an exception is thrown in the change-stream.
            </summary>
        </member>
        <member name="E:MongoDB.Entities.Watcher`1.OnStop">
            <summary>
            This event is fired when the internal cursor get closed due to an 'invalidate' event or cancellation is requested via the cancellation token.
            </summary>
        </member>
        <member name="P:MongoDB.Entities.Watcher`1.Name">
            <summary>
            The name of this watcher instance
            </summary>
        </member>
        <member name="P:MongoDB.Entities.Watcher`1.CanRestart">
            <summary>
            Returns true if watching can be restarted if it was stopped due to an error or invalidate event.
            Will always return false after cancellation is requested via the cancellation token.
            </summary>
        </member>
        <member name="P:MongoDB.Entities.Watcher`1.ResumeToken">
            <summary>
            The last resume token received from mongodb server. Can be used to resume watching with .StartWithToken() method.
            </summary>
        </member>
        <member name="M:MongoDB.Entities.Watcher`1.Start(MongoDB.Entities.EventType,System.Linq.Expressions.Expression{System.Func{MongoDB.Driver.ChangeStreamDocument{`0},System.Boolean}},System.Int32,System.Boolean,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Starts the watcher instance with the supplied parameters
            </summary>
            <param name="eventTypes">Type of event to watch for. Specify multiple like: EventType.Created | EventType.Updated | EventType.Deleted</param>
            <param name="filter">x => x.FullDocument.Prop1 == "SomeValue"</param>
            <param name="batchSize">The max number of entities to receive for a single event occurence</param>
            <param name="onlyGetIDs">Set to true if you don't want the complete entity details. All properties except the ID will then be null.</param>
            <param name="autoResume">Set to false if you'd like to skip the changes that happened while the watching was stopped. This will also make you unable to retrieve a ResumeToken.</param>
            <param name="cancellation">A cancellation token for ending the watching/change stream</param>
        </member>
        <member name="M:MongoDB.Entities.Watcher`1.Start(MongoDB.Entities.EventType,System.Func{MongoDB.Driver.FilterDefinitionBuilder{MongoDB.Driver.ChangeStreamDocument{`0}},MongoDB.Driver.FilterDefinition{MongoDB.Driver.ChangeStreamDocument{`0}}},System.Int32,System.Boolean,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Starts the watcher instance with the supplied parameters
            </summary>
            <param name="eventTypes">Type of event to watch for. Specify multiple like: EventType.Created | EventType.Updated | EventType.Deleted</param>
            <param name="filter">b => b.Eq(d => d.FullDocument.Prop1, "value")</param>
            <param name="batchSize">The max number of entities to receive for a single event occurence</param>
            <param name="onlyGetIDs">Set to true if you don't want the complete entity details. All properties except the ID will then be null.</param>
            <param name="autoResume">Set to false if you'd like to skip the changes that happened while the watching was stopped. This will also make you unable to retrieve a ResumeToken.</param>
            <param name="cancellation">A cancellation token for ending the watching/change stream</param>
        </member>
        <member name="M:MongoDB.Entities.Watcher`1.StartWithToken(MongoDB.Bson.BsonDocument,MongoDB.Entities.EventType,System.Linq.Expressions.Expression{System.Func{MongoDB.Driver.ChangeStreamDocument{`0},System.Boolean}},System.Int32,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Starts the watcher instance with the supplied configuration
            </summary>
            <param name="resumeToken">A resume token to start receiving changes after some point back in time</param>
            <param name="eventTypes">Type of event to watch for. Specify multiple like: EventType.Created | EventType.Updated | EventType.Deleted</param>
            <param name="filter">x => x.FullDocument.Prop1 == "SomeValue"</param>
            <param name="batchSize">The max number of entities to receive for a single event occurence</param>
            <param name="onlyGetIDs">Set to true if you don't want the complete entity details. All properties except the ID will then be null.</param>
            <param name="cancellation">A cancellation token for ending the watching/change stream</param>
        </member>
        <member name="M:MongoDB.Entities.Watcher`1.StartWithToken(MongoDB.Bson.BsonDocument,MongoDB.Entities.EventType,System.Func{MongoDB.Driver.FilterDefinitionBuilder{MongoDB.Driver.ChangeStreamDocument{`0}},MongoDB.Driver.FilterDefinition{MongoDB.Driver.ChangeStreamDocument{`0}}},System.Int32,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Starts the watcher instance with the supplied configuration
            </summary>
            <param name="resumeToken">A resume token to start receiving changes after some point back in time</param>
            <param name="eventTypes">Type of event to watch for. Specify multiple like: EventType.Created | EventType.Updated | EventType.Deleted</param>
            <param name="filter">b => b.Eq(d => d.FullDocument.Prop1, "value")</param>
            <param name="batchSize">The max number of entities to receive for a single event occurence</param>
            <param name="onlyGetIDs">Set to true if you don't want the complete entity details. All properties except the ID will then be null.</param>
            <param name="cancellation">A cancellation token for ending the watching/change stream</param>
        </member>
        <member name="M:MongoDB.Entities.Watcher`1.ReStart">
            <summary>
            If the watcher stopped due to an error or invalidate event, you can try to restart the watching again with this method.
            </summary>
        </member>
        <member name="T:MongoDB.Entities.IgnoreAttribute">
            <summary>
            Indicates that this property should be ignored when this class is persisted to MongoDB.
            </summary>
        </member>
        <member name="T:MongoDB.Entities.OwnerSideAttribute">
            <summary>
            Indicates that this property is the owner side of a many-to-many relationship
            </summary>
        </member>
        <member name="T:MongoDB.Entities.InverseSideAttribute">
            <summary>
            Indicates that this property is the inverse side of a many-to-many relationship
            </summary>
        </member>
        <member name="T:MongoDB.Entities.NameAttribute">
            <summary>
            Use this attribute to specify a custom MongoDB collection name for an IEntity.
            </summary>
        </member>
        <member name="M:MongoDB.Entities.NameAttribute.#ctor(System.String)">
            <summary>
            Use this attribute to specify a custom MongoDB collection name for an IEntity.
            </summary>
            <param name="name">The name you want to use for the collection</param>
        </member>
        <member name="T:MongoDB.Entities.PreserveAttribute">
            <summary>
            Use this attribute on properties that you want to omit when using SavePreserving() instead of supplying an expression. 
            TIP: These attribute decorations are only effective if you do not specify a preservation expression when calling SavePreserving() 
            </summary>
        </member>
        <member name="T:MongoDB.Entities.DontPreserveAttribute">
            <summary>
            Properties that don't have this attribute will be omitted when using SavePreserving()
            TIP: These attribute decorations are only effective if you do not specify a preservation expression when calling SavePreserving()
            </summary>
        </member>
        <member name="T:MongoDB.Entities.ObjectIdAttribute">
            <summary>
            Use this attribute to mark a property in order to save it in MongoDB server as ObjectId
            </summary>
        </member>
        <member name="T:MongoDB.Entities.AsObjectIdAttribute">
            <summary>
            Use this attribute to mark a string property to store the value in MongoDB as ObjectID if it is a valid ObjectId string. 
            If it is not a valid ObjectId string, it will be stored as string. This is useful when using custom formats for the ID field.
            </summary>
        </member>
        <member name="T:MongoDB.Entities.Date">
            <summary>
            A custom date/time type for precision datetime handling
            </summary>
        </member>
        <member name="T:MongoDB.Entities.DBContext">
            <summary>
            This db context class can be used as an alternative entry point instead of the DB static class. 
            All methods on this class can be overriden if needed.
            </summary>
        </member>
        <member name="F:MongoDB.Entities.DBContext.ModifiedBy">
            <summary>
            The value of this property will be automatically set on entities when saving/updating if the entity has a ModifiedBy property
            </summary>
        </member>
        <member name="M:MongoDB.Entities.DBContext.#ctor(MongoDB.Entities.ModifiedBy)">
            <summary>
            Instantiates a DBContext
            </summary>
            <param name="modifiedBy">An optional ModifiedBy instance. 
            When supplied, all save/update operations performed via this DBContext instance will set the value on entities that has a property of type ModifiedBy. 
            You can even inherit from the ModifiedBy class and add your own properties to it. 
            Only one ModifiedBy property is allowed on a single entity type.</param>
        </member>
        <member name="M:MongoDB.Entities.DBContext.CountAsync``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Threading.CancellationToken)">
            <summary>
            Gets an accurate count of how many entities are matched for a given expression/filter in the transaction scope.
            </summary>
            <typeparam name="T">The entity type to get the count for</typeparam>
            <param name="expression">A lambda expression for getting the count for a subset of the data</param>
            <param name="cancellation">An optional cancellation token</param>
        </member>
        <member name="M:MongoDB.Entities.DBContext.CountAsync``1(System.Threading.CancellationToken)">
            <summary>
            Gets an accurate count of how many total entities are in the collection for a given entity type in the transaction scope.
            </summary>
            <typeparam name="T">The entity type to get the count for</typeparam>
            <param name="cancellation">An optional cancellation token</param>
        </member>
        <member name="M:MongoDB.Entities.DBContext.CountAsync``1(MongoDB.Driver.FilterDefinition{``0},System.Threading.CancellationToken)">
            <summary>
            Gets an accurate count of how many total entities are in the collection for a given entity type in the transaction scope.
            </summary>
            <typeparam name="T">The entity type to get the count for</typeparam>
            <param name="filter">A filter definition</param>
            <param name="cancellation">An optional cancellation token</param>
        </member>
        <member name="M:MongoDB.Entities.DBContext.CountAsync``1(System.Func{MongoDB.Driver.FilterDefinitionBuilder{``0},MongoDB.Driver.FilterDefinition{``0}},System.Threading.CancellationToken)">
            <summary>
            Gets an accurate count of how many total entities are in the collection for a given entity type in the transaction scope.
            </summary>
            <typeparam name="T">The entity type to get the count for</typeparam>
            <param name="filter">f => f.Eq(x => x.Prop, Value) &amp; f.Gt(x => x.Prop, Value)</param>
            <param name="cancellation">An optional cancellation token</param>
        </member>
        <member name="M:MongoDB.Entities.DBContext.Update``1">
            <summary>
            Starts an update command for the given entity type in the transaction scope.
            </summary>
            <typeparam name="T">The type of entity</typeparam>
        </member>
        <member name="M:MongoDB.Entities.DBContext.UpdateAndGet``1">
            <summary>
            Starts an update-and-get command for the given entity type in the transaction scope.
            </summary>
            <typeparam name="T">The type of entity</typeparam>
        </member>
        <member name="M:MongoDB.Entities.DBContext.UpdateAndGet``2">
            <summary>
            Starts an update-and-get command with projection support for the given entity type in the transaction scope.
            </summary>
            <typeparam name="T">The type of entity</typeparam>
            <typeparam name="TProjection">The type of the end result</typeparam>
        </member>
        <member name="M:MongoDB.Entities.DBContext.Find``1">
            <summary>
            Starts a find command for the given entity type in the transaction scope.
            </summary>
            <typeparam name="T">The type of entity</typeparam>
        </member>
        <member name="M:MongoDB.Entities.DBContext.Find``2">
            <summary>
            Starts a find command with projection support for the given entity type in the transaction scope.
            </summary>
            <typeparam name="T">The type of entity</typeparam>
            <typeparam name="TProjection">The type of the end result</typeparam>
        </member>
        <member name="M:MongoDB.Entities.DBContext.Fluent``1(MongoDB.Driver.AggregateOptions)">
            <summary>
            Exposes the MongoDB collection for the given entity type as IAggregateFluent in order to facilitate Fluent queries in the transaction sope.
            </summary>
            <typeparam name="T">The type of entity</typeparam>
            <param name="options">The options for the aggregation. This is not required.</param>
        </member>
        <member name="M:MongoDB.Entities.DBContext.Queryable``1(MongoDB.Driver.AggregateOptions)">
            <summary>
            Exposes the MongoDB collection for the given entity type as IQueryable in order to facilitate LINQ queries in the transaction scope.
            </summary>
            <param name="options">The aggregate options</param>
            <typeparam name="T">The type of entity</typeparam>
        </member>
        <member name="M:MongoDB.Entities.DBContext.PipelineCursorAsync``2(MongoDB.Entities.Template{``0,``1},MongoDB.Driver.AggregateOptions,System.Threading.CancellationToken)">
            <summary>
            Executes an aggregation pipeline in the transaction scope by supplying a 'Template' object.
            Gets a cursor back as the result.
            </summary>
            <typeparam name="T">The type of entity</typeparam>
            <typeparam name="TResult">The type of the resulting objects</typeparam>
            <param name="template">A 'Template' object with tags replaced</param>
            <param name="options">The options for the aggregation. This is not required.</param>
            <param name="cancellation">An optional cancellation token</param>
        </member>
        <member name="M:MongoDB.Entities.DBContext.PipelineAsync``2(MongoDB.Entities.Template{``0,``1},MongoDB.Driver.AggregateOptions,System.Threading.CancellationToken)">
            <summary>
            Executes an aggregation pipeline in the transaction scope by supplying a 'Template' object.
            Gets a list back as the result.
            </summary>
            <typeparam name="T">The type of entity</typeparam>
            <typeparam name="TResult">The type of the resulting objects</typeparam>
            <param name="template">A 'Template' object with tags replaced</param>
            <param name="options">The options for the aggregation. This is not required.</param>
            <param name="cancellation">An optional cancellation token</param>
        </member>
        <member name="M:MongoDB.Entities.DBContext.PipelineSingleAsync``2(MongoDB.Entities.Template{``0,``1},MongoDB.Driver.AggregateOptions,System.Threading.CancellationToken)">
            <summary>
            Executes an aggregation pipeline in the transaction scope by supplying a 'Template' object.
            Gets a single or default value as the result.
            </summary>
            <typeparam name="T">The type of entity</typeparam>
            <typeparam name="TResult">The type of the resulting objects</typeparam>
            <param name="template">A 'Template' object with tags replaced</param>
            <param name="options">The options for the aggregation. This is not required.</param>
            <param name="cancellation">An optional cancellation token</param>
        </member>
        <member name="M:MongoDB.Entities.DBContext.PipelineFirstAsync``2(MongoDB.Entities.Template{``0,``1},MongoDB.Driver.AggregateOptions,System.Threading.CancellationToken)">
            <summary>
            Executes an aggregation pipeline in the transaction scope by supplying a 'Template' object.
            Gets the first or default value as the result.
            </summary>
            <typeparam name="T">The type of entity</typeparam>
            <typeparam name="TResult">The type of the resulting objects</typeparam>
            <param name="template">A 'Template' object with tags replaced</param>
            <param name="options">The options for the aggregation. This is not required.</param>
            <param name="cancellation">An optional cancellation token</param>
        </member>
        <member name="M:MongoDB.Entities.DBContext.GeoNear``1(MongoDB.Entities.Coordinates2D,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Boolean,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},MongoDB.Bson.BsonDocument,System.Nullable{System.Int32},System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.String,MongoDB.Driver.AggregateOptions)">
            <summary>
            Start a fluent aggregation pipeline with a $GeoNear stage with the supplied parameters in the transaction scope.
            </summary>
            <param name="NearCoordinates">The coordinates from which to find documents from</param>
            <param name="DistanceField">x => x.Distance</param>
            <param name="Spherical">Calculate distances using spherical geometry or not</param>
            <param name="MaxDistance">The maximum distance in meters from the center point that the documents can be</param>
            <param name="MinDistance">The minimum distance in meters from the center point that the documents can be</param>
            <param name="Limit">The maximum number of documents to return</param>
            <param name="Query">Limits the results to the documents that match the query</param>
            <param name="DistanceMultiplier">The factor to multiply all distances returned by the query</param>
            <param name="IncludeLocations">Specify the output field to store the point used to calculate the distance</param>
            <param name="IndexKey"></param>
            <param name="options">The options for the aggregation. This is not required.</param>
            <typeparam name="T">The type of entity</typeparam>
        </member>
        <member name="M:MongoDB.Entities.DBContext.SaveAsync``1(``0,System.Threading.CancellationToken)">
            <summary>
            Saves a complete entity replacing an existing entity or creating a new one if it does not exist. 
            If ID value is null, a new entity is created. If ID has a value, then existing entity is replaced.
            </summary>
            <typeparam name="T">The type of entity</typeparam>
            <param name="entity">The instance to persist</param>
            <param name="cancellation">And optional cancellation token</param>
        </member>
        <member name="M:MongoDB.Entities.DBContext.SaveAsync``1(System.Collections.Generic.IEnumerable{``0},System.Threading.CancellationToken)">
            <summary>
            Saves a batch of complete entities replacing an existing entities or creating a new ones if they do not exist. 
            If ID value is null, a new entity is created. If ID has a value, then existing entity is replaced.
            </summary>
            <typeparam name="T">The type of entity</typeparam>
            <param name="entities">The entities to persist</param>
            <param name="cancellation">And optional cancellation token</param>
        </member>
        <member name="M:MongoDB.Entities.DBContext.SaveOnlyAsync``1(``0,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Threading.CancellationToken)">
            <summary>
            Saves an entity partially with only the specified subset of properties. 
            If ID value is null, a new entity is created. If ID has a value, then existing entity is updated.
            <para>TIP: The properties to be saved can be specified with a 'New' expression. 
            You can only specify root level properties with the expression.</para>
            </summary>
            <typeparam name="T">Any class that implements IEntity</typeparam>
            <param name="entity">The entity to save</param>
            <param name="members">x => new { x.PropOne, x.PropTwo }</param>
            <param name="cancellation">An optional cancellation token</param>
        </member>
        <member name="M:MongoDB.Entities.DBContext.SaveOnlyAsync``1(System.Collections.Generic.IEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Threading.CancellationToken)">
            <summary>
            Saves a batch of entities partially with only the specified subset of properties. 
            If ID value is null, a new entity is created. If ID has a value, then existing entity is updated.
            <para>TIP: The properties to be saved can be specified with a 'New' expression. 
            You can only specify root level properties with the expression.</para>
            </summary>
            <typeparam name="T">Any class that implements IEntity</typeparam>
            <param name="entities">The batch of entities to save</param>
            <param name="members">x => new { x.PropOne, x.PropTwo }</param>
            <param name="cancellation">An optional cancellation token</param>
        </member>
        <member name="M:MongoDB.Entities.DBContext.SaveExceptAsync``1(``0,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Threading.CancellationToken)">
            <summary>
            Saves an entity partially excluding the specified subset of properties. 
            If ID value is null, a new entity is created. If ID has a value, then existing entity is updated.
            <para>TIP: The properties to be excluded can be specified with a 'New' expression. 
            You can only specify root level properties with the expression.</para>
            </summary>
            <typeparam name="T">Any class that implements IEntity</typeparam>
            <param name="entity">The entity to save</param>
            <param name="members">x => new { x.PropOne, x.PropTwo }</param>
            <param name="cancellation">An optional cancellation token</param>
        </member>
        <member name="M:MongoDB.Entities.DBContext.SaveExceptAsync``1(System.Collections.Generic.IEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Threading.CancellationToken)">
            <summary>
            Saves a batch of entities partially excluding the specified subset of properties. 
            If ID value is null, a new entity is created. If ID has a value, then existing entity is updated.
            <para>TIP: The properties to be excluded can be specified with a 'New' expression. 
            You can only specify root level properties with the expression.</para>
            </summary>
            <typeparam name="T">Any class that implements IEntity</typeparam>
            <param name="entities">The batch of entities to save</param>
            <param name="members">x => new { x.PropOne, x.PropTwo }</param>
            <param name="cancellation">An optional cancellation token</param>
        </member>
        <member name="M:MongoDB.Entities.DBContext.SavePreservingAsync``1(``0,System.Threading.CancellationToken)">
            <summary>
            Saves an entity partially while excluding some properties in the transaction scope.
            The properties to be excluded can be specified using the [Preserve] or [DontPreserve] attributes.
            </summary>
            <typeparam name="T">The type of entity</typeparam>
            <param name="entity">The entity to save</param>
            <param name="cancellation">An optional cancellation token</param>
        </member>
        <member name="M:MongoDB.Entities.DBContext.DeleteAsync``1(System.String,System.Threading.CancellationToken)">
            <summary>
            Deletes a single entity from MongoDB in the transaction scope.
            <para>HINT: If this entity is referenced by one-to-many/many-to-many relationships, those references are also deleted.</para>
            </summary>
            <typeparam name="T">The type of entity</typeparam>
            <param name="ID">The Id of the entity to delete</param>
            <param name="cancellation">An optional cancellation token</param>
        </member>
        <member name="M:MongoDB.Entities.DBContext.DeleteAsync``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Threading.CancellationToken)">
            <summary>
            Deletes matching entities from MongoDB in the transaction scope
            <para>HINT: If these entities are referenced by one-to-many/many-to-many relationships, those references are also deleted.</para>
            <para>TIP: Try to keep the number of entities to delete under 100 in a single call</para>
            </summary>
            <typeparam name="T">The type of entity</typeparam>
            <param name="expression">A lambda expression for matching entities to delete.</param>
            <param name="cancellation">An optional cancellation token</param>
        </member>
        <member name="M:MongoDB.Entities.DBContext.DeleteAsync``1(System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)">
            <summary>
            Deletes matching entities from MongoDB in the transaction scope
            <para>HINT: If these entities are referenced by one-to-many/many-to-many relationships, those references are also deleted.</para>
            <para>TIP: Try to keep the number of entities to delete under 100 in a single call</para>
            </summary>
            <typeparam name="T">The type of entity</typeparam>
            <param name="IDs">An IEnumerable of entity IDs</param>
            <param name="cancellation">An optional cancellation token</param>
        </member>
        <member name="M:MongoDB.Entities.DBContext.FluentTextSearch``1(MongoDB.Entities.Search,System.String,System.Boolean,System.Boolean,System.String,MongoDB.Driver.AggregateOptions)">
            <summary>
            Start a fluent aggregation pipeline with a $text stage with the supplied parameters in the transaction scope.
            <para>TIP: Make sure to define a text index with DB.Index&lt;T&gt;() before searching</para>
            </summary>
            <param name="searchType">The type of text matching to do</param>
            <param name="searchTerm">The search term</param>
            <param name="caseSensitive">Case sensitivity of the search (optional)</param>
            <param name="diacriticSensitive">Diacritic sensitivity of the search (optional)</param>
            <param name="language">The language for the search (optional)</param>
            <param name="options">Options for finding documents (not required)</param>
        </member>
        <member name="T:MongoDB.Entities.Entity">
            <summary>
            Inherit this class for all entities you want to store in their own collection.
            </summary>
        </member>
        <member name="P:MongoDB.Entities.Entity.ID">
            <summary>
            This property is auto managed. A new ID will be assigned for new entities upon saving.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:MongoDB.Entities.Entity.GenerateNewID" -->
        <member name="T:MongoDB.Entities.FileEntity">
            <summary>
            Inherit this base class in order to create your own File Entities
            </summary>
        </member>
        <member name="P:MongoDB.Entities.FileEntity.FileSize">
            <summary>
            The total amount of data in bytes that has been uploaded so far
            </summary>
        </member>
        <member name="P:MongoDB.Entities.FileEntity.ChunkCount">
            <summary>
            The number of chunks that have been created so far
            </summary>
        </member>
        <member name="P:MongoDB.Entities.FileEntity.UploadSuccessful">
            <summary>
            Returns true only when all the chunks have been stored successfully in mongodb
            </summary>
        </member>
        <member name="P:MongoDB.Entities.FileEntity.Data">
            <summary>
            Access the DataStreamer class for uploading and downloading data
            </summary>
        </member>
        <member name="T:MongoDB.Entities.DataStreamer">
            <summary>
            Provides the interface for uploading and downloading data chunks for file entities.
            </summary>
        </member>
        <member name="M:MongoDB.Entities.DataStreamer.DownloadWithTimeoutAsync(System.IO.Stream,System.Int32,System.Int32,MongoDB.Driver.IClientSessionHandle)">
            <summary>
            Download binary data for this file entity from mongodb in chunks into a given stream with a timeout period.
            </summary>
            <param name="stream">The output stream to write the data</param>
            <param name="timeOutSeconds">The maximum number of seconds allowed for the operation to complete</param>
            <param name="batchSize"></param>
            <param name="session"></param>
        </member>
        <member name="M:MongoDB.Entities.DataStreamer.DownloadAsync(System.IO.Stream,System.Int32,System.Threading.CancellationToken,MongoDB.Driver.IClientSessionHandle)">
            <summary>
            Download binary data for this file entity from mongodb in chunks into a given stream.
            </summary>
            <param name="stream">The output stream to write the data</param>
            <param name="batchSize">The number of chunks you want returned at once</param>
            <param name="cancellation">An optional cancellation token.</param>
            <param name="session">An optional session if using within a transaction</param>
        </member>
        <member name="M:MongoDB.Entities.DataStreamer.UploadWithTimeoutAsync(System.IO.Stream,System.Int32,System.Int32,MongoDB.Driver.IClientSessionHandle)">
            <summary>
            Upload binary data for this file entity into mongodb in chunks from a given stream with a timeout period.
            </summary>
            <param name="stream">The input stream to read the data from</param>
            <param name="timeOutSeconds">The maximum number of seconds allowed for the operation to complete</param>
            <param name="chunkSizeKB">The 'average' size of one chunk in KiloBytes</param>
            <param name="session">An optional session if using within a transaction</param>
        </member>
        <member name="M:MongoDB.Entities.DataStreamer.UploadAsync(System.IO.Stream,System.Int32,System.Threading.CancellationToken,MongoDB.Driver.IClientSessionHandle)">
            <summary>
            Upload binary data for this file entity into mongodb in chunks from a given stream.
            <para>TIP: Make sure to save the entity before calling this method.</para>
            </summary>
            <param name="stream">The input stream to read the data from</param>
            <param name="chunkSizeKB">The 'average' size of one chunk in KiloBytes</param>
            <param name="cancellation">An optional cancellation token.</param>
            <param name="session">An optional session if using within a transaction</param>
        </member>
        <member name="T:MongoDB.Entities.FuzzyString">
            <summary>
            Use this type to store strings if you need fuzzy text searching with MongoDB
            <para>TIP: There's a default limit of 250 characters for ensuring best performance. 
            If you exceed the default limit, an exception will be thrown. 
            You can increase the limit by sacrificing performance/resource utilization by setting the static property 
            <c>FuzzyString.CharacterLimit = 500</c> at startup.</para>
            </summary>
        </member>
        <member name="T:MongoDB.Entities.Coordinates2D">
            <summary>
            Represents a GeoJsonPoint of GeoJson2DGeographicCoordinates
            </summary>
        </member>
        <member name="M:MongoDB.Entities.Coordinates2D.#ctor(System.Double,System.Double)">
            <summary>
            Instantiate a new Coordinates2D instance with the supplied longtitude and latitude
            </summary>
        </member>
        <member name="M:MongoDB.Entities.Coordinates2D.ToGeoJsonPoint">
            <summary>
            Converts a Coordinates2D instance to a GeoJsonPoint of GeoJson2DGeographicCoordinates 
            </summary>
        </member>
        <member name="M:MongoDB.Entities.Coordinates2D.GeoJsonPoint(System.Double,System.Double)">
            <summary>
            Create a GeoJsonPoint of GeoJson2DGeographicCoordinates with supplied longitude and latitude
            </summary>
        </member>
        <member name="T:MongoDB.Entities.GeoNear`1">
            <summary>
            Fluent aggregation pipeline builder for GeoNear
            </summary>
            <typeparam name="T">The type of entity</typeparam>
        </member>
        <member name="T:MongoDB.Entities.ICreatedOn">
            <summary>
            Implement this interface on entities you want the library to automatically store the creation date with
            </summary>
        </member>
        <member name="P:MongoDB.Entities.ICreatedOn.CreatedOn">
            <summary>
            This property will be automatically set by the library when an entity is created.
            <para>TIP: This property is useful when sorting by creation date.</para>
            </summary>
        </member>
        <member name="T:MongoDB.Entities.IEntity">
            <summary>
            The contract for Entity classes
            </summary>
        </member>
        <member name="P:MongoDB.Entities.IEntity.ID">
            <summary>
            The ID property for this entity type.
            <para>IMPORTANT: make sure to decorate this property with the [BsonId] attribute when implementing this interface</para>
            </summary>
        </member>
        <member name="M:MongoDB.Entities.IEntity.GenerateNewID">
            <summary>
            Generate and return a new ID string from this method. It will be used when saving new entities that don't have their ID set. 
            That is, if an entity has a null ID, this method will be called for getting a new ID value. 
            If you're not doing custom ID generation, simply do <c>return ObjectId.GenerateNewId().ToString()</c>
            </summary>
        </member>
        <member name="T:MongoDB.Entities.IModifiedOn">
            <summary>
            Implement this interface on entities you want the library to automatically store the modified date with
            </summary>
        </member>
        <member name="P:MongoDB.Entities.IModifiedOn.ModifiedOn">
            <summary>
            This property will be automatically set by the library when an entity is updated.
            <para>TIP: This property is useful when sorting by update date.</para>
            </summary>
        </member>
        <member name="T:MongoDB.Entities.Template`1">
            <summary>
            A helper class to build a JSON command from a string with tag replacement
            </summary>
            <typeparam name="T">Any type that implements IEntity</typeparam>
        </member>
        <member name="M:MongoDB.Entities.Template`1.#ctor(System.String)">
            <summary>
            Initializes a template with a tagged input string.
            </summary>
            <param name="template">The template string with tags for targeting replacements such as "&lt;Author.Name&gt;"</param>
        </member>
        <member name="T:MongoDB.Entities.Template`2">
            <summary>
            A helper class to build a JSON command from a string with tag replacement
            </summary>
            <typeparam name="TInput">The input type</typeparam>
            <typeparam name="TResult">The output type</typeparam>
        </member>
        <member name="M:MongoDB.Entities.Template`2.#ctor(System.String)">
            <summary>
            Initializes a template with a tagged input string.
            </summary>
            <param name="template">The template string with tags for targeting replacements such as "&lt;Author.Name&gt;"</param>
        </member>
        <member name="M:MongoDB.Entities.Template`2.Collection``1">
            <summary>
            Gets the collection name of a given entity type and replaces matching tags in the template such as "&lt;EntityName&gt;"
            </summary>
            <typeparam name="TEntity">The type of entity to get the collection name of</typeparam>
        </member>
        <member name="M:MongoDB.Entities.Template`2.Property(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>
            Turns the given member expression (of input type) into a property name like "SomeProp" and replaces matching tags in the template such as "&lt;SomeProp&gt;"
            </summary>
            <param name="expression">x => x.RootProp.SomeProp</param>
        </member>
        <member name="M:MongoDB.Entities.Template`2.PropertyOfResult(System.Linq.Expressions.Expression{System.Func{`1,System.Object}})">
            <summary>
            Turns the given member expression (of output type) into a property name like "SomeProp" and replaces matching tags in the template such as "&lt;SomeProp&gt;"
            </summary>
            <param name="expression">x => x.RootProp.SomeProp</param>
        </member>
        <member name="M:MongoDB.Entities.Template`2.Property``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            Turns the given member expression (of any type) into a property name like "SomeProp" and replaces matching tags in the template such as "&lt;SomeProp&gt;"
            </summary>
            <param name="expression">x => x.RootProp.SomeProp</param>
        </member>
        <member name="M:MongoDB.Entities.Template`2.Path(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>
            Turns the given expression (of input type) to a dotted path like "SomeList.SomeProp" and replaces matching tags in the template such as "&lt;SomeList.SomeProp&gt;"
            </summary>
            <param name="expression">x => x.SomeList[0].SomeProp</param>
        </member>
        <member name="M:MongoDB.Entities.Template`2.PathOfResult(System.Linq.Expressions.Expression{System.Func{`1,System.Object}})">
            <summary>
            Turns the given expression (of output type) to a dotted path like "SomeList.SomeProp" and replaces matching tags in the template such as "&lt;SomeList.SomeProp&gt;"
            </summary>
            <param name="expression">x => x.SomeList[0].SomeProp</param>
        </member>
        <member name="M:MongoDB.Entities.Template`2.Path``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            Turns the given expression (of any type) to a dotted path like "SomeList.SomeProp" and replaces matching tags in the template such as "&lt;SomeList.SomeProp&gt;"
            </summary>
            <param name="expression">x => x.SomeList[0].SomeProp</param>
        </member>
        <member name="M:MongoDB.Entities.Template`2.Paths(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>
            Turns the property paths in the given `new` expression (of input type) into paths like "Prop1.Child1 &amp; Prop2.Child2" and replaces matching tags in the template.
            </summary>
            <param name="expression">x => new { x.Prop1.Child1, x.Prop2.Child2 }</param>
        </member>
        <member name="M:MongoDB.Entities.Template`2.PathsOfResult(System.Linq.Expressions.Expression{System.Func{`1,System.Object}})">
            <summary>
            Turns the property paths in the given `new` expression (of output type) into paths like "Prop1.Child1 &amp; Prop2.Child2" and replaces matching tags in the template.
            </summary>
            <param name="expression">x => new { x.Prop1.Child1, x.Prop2.Child2 }</param>
        </member>
        <member name="M:MongoDB.Entities.Template`2.Paths``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            Turns the property paths in the given `new` expression (of any type) into paths like "Prop1.Child1 &amp; Prop2.Child2" and replaces matching tags in the template.
            </summary>
            <param name="expression">x => new { x.Prop1.Child1, x.Prop2.Child2 }</param>
        </member>
        <member name="M:MongoDB.Entities.Template`2.PosFiltered(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>
            Turns the given expression (of input type) to a positional filtered path like "Authors.$[a].Name" and replaces matching tags in the template such as "&lt;Authors.$[a].Name&gt;"
            <para>TIP: Index positions start from [0] which is converted to $[a] and so on.</para>
            </summary>
            <param name="expression">x => x.SomeList[0].SomeProp</param>
        </member>
        <member name="M:MongoDB.Entities.Template`2.PosFilteredOfResult(System.Linq.Expressions.Expression{System.Func{`1,System.Object}})">
            <summary>
            Turns the given expression (of output type) to a positional filtered path like "Authors.$[a].Name" and replaces matching tags in the template such as "&lt;Authors.$[a].Name&gt;"
            <para>TIP: Index positions start from [0] which is converted to $[a] and so on.</para>
            </summary>
            <param name="expression">x => x.SomeList[0].SomeProp</param>
        </member>
        <member name="M:MongoDB.Entities.Template`2.PosFiltered``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            Turns the given expression (of any type) to a positional filtered path like "Authors.$[a].Name" and replaces matching tags in the template such as "&lt;Authors.$[a].Name&gt;"
            <para>TIP: Index positions start from [0] which is converted to $[a] and so on.</para>
            </summary>
            <param name="expression">x => x.SomeList[0].SomeProp</param>
        </member>
        <member name="M:MongoDB.Entities.Template`2.PosAll(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>
            Turns the given expression (of input type) to a path with the all positional operator like "Authors.$[].Name" and replaces matching tags in the template such as "&lt;Authors.$[].Name&gt;"
            </summary>
            <param name="expression">x => x.SomeList[0].SomeProp</param>
        </member>
        <member name="M:MongoDB.Entities.Template`2.PosAllOfResult(System.Linq.Expressions.Expression{System.Func{`1,System.Object}})">
            <summary>
            Turns the given expression (of output type) to a path with the all positional operator like "Authors.$[].Name" and replaces matching tags in the template such as "&lt;Authors.$[].Name&gt;"
            </summary>
            <param name="expression">x => x.SomeList[0].SomeProp</param>
        </member>
        <member name="M:MongoDB.Entities.Template`2.PosAll``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            Turns the given expression (of any type) to a path with the all positional operator like "Authors.$[].Name" and replaces matching tags in the template such as "&lt;Authors.$[].Name&gt;"
            </summary>
            <param name="expression">x => x.SomeList[0].SomeProp</param>
        </member>
        <member name="M:MongoDB.Entities.Template`2.PosFirst(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>
            Turns the given expression (of input type) to a path with the first positional operator like "Authors.$.Name" and replaces matching tags in the template such as "&lt;Authors.$.Name&gt;"
            </summary>
            <param name="expression">x => x.SomeList[0].SomeProp</param>
        </member>
        <member name="M:MongoDB.Entities.Template`2.PosFirstOfResult(System.Linq.Expressions.Expression{System.Func{`1,System.Object}})">
            <summary>
            Turns the given expression (of output type) to a path with the first positional operator like "Authors.$.Name" and replaces matching tags in the template such as "&lt;Authors.$.Name&gt;"
            </summary>
            <param name="expression">x => x.SomeList[0].SomeProp</param>
        </member>
        <member name="M:MongoDB.Entities.Template`2.PosFirst``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            Turns the given expression (of any type) to a path with the first positional operator like "Authors.$.Name" and replaces matching tags in the template such as "&lt;Authors.$.Name&gt;"
            </summary>
            <param name="expression">x => x.SomeList[0].SomeProp</param>
        </member>
        <member name="M:MongoDB.Entities.Template`2.Elements(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>
            Turns the given expression (of input type) to a path without any filtered positional identifier prepended to it like "Name" and replaces matching tags in the template such as "&lt;Name&gt;"
            </summary>
            <param name="expression">x => x.SomeProp</param>
        </member>
        <member name="M:MongoDB.Entities.Template`2.ElementsOfResult(System.Linq.Expressions.Expression{System.Func{`1,System.Object}})">
            <summary>
            Turns the given expression (of output type) to a path without any filtered positional identifier prepended to it like "Name" and replaces matching tags in the template such as "&lt;Name&gt;"
            </summary>
            <param name="expression">x => x.SomeProp</param>
        </member>
        <member name="M:MongoDB.Entities.Template`2.Elements``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            Turns the given expression (of any type) to a path without any filtered positional identifier prepended to it like "Name" and replaces matching tags in the template such as "&lt;Name&gt;"
            </summary>
            <param name="expression">x => x.SomeProp</param>
        </member>
        <member name="M:MongoDB.Entities.Template`2.Elements(System.Int32,System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>
            Turns the given index and expression (of input type) to a path with the filtered positional identifier prepended to the property path like "a.Name" and replaces matching tags in the template such as "&lt;a.Name&gt;"
            </summary>
            <param name="index">0=a 1=b 2=c 3=d and so on...</param>
            <param name="expression">x => x.SomeProp</param>
        </member>
        <member name="M:MongoDB.Entities.Template`2.ElementsOfResult(System.Int32,System.Linq.Expressions.Expression{System.Func{`1,System.Object}})">
            <summary>
            Turns the given index and expression (of output type) to a path with the filtered positional identifier prepended to the property path like "a.Name" and replaces matching tags in the template such as "&lt;a.Name&gt;"
            </summary>
            <param name="index">0=a 1=b 2=c 3=d and so on...</param>
            <param name="expression">x => x.SomeProp</param>
        </member>
        <member name="M:MongoDB.Entities.Template`2.Elements``1(System.Int32,System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            Turns the given index and expression (of any type) to a path with the filtered positional identifier prepended to the property path like "a.Name" and replaces matching tags in the template such as "&lt;a.Name&gt;"
            </summary>
            <param name="index">0=a 1=b 2=c 3=d and so on...</param>
            <param name="expression">x => x.SomeProp</param>
        </member>
        <member name="M:MongoDB.Entities.Template`2.Tag(System.String,System.String)">
            <summary>
            Replaces the given tag in the template like "&lt;search_term&gt;" with the supplied value.
            </summary>
            <param name="tagName">The tag name without the surrounding &lt; and &gt;</param>
            <param name="replacementValue">The value to replace with</param>
        </member>
        <member name="M:MongoDB.Entities.Template`2.ToPipeline">
            <summary>
            Executes the tag replacement and returns a pipeline definition.
            <para>TIP: if all the tags don't match, an exception will be thrown.</para>
            </summary>
        </member>
        <member name="M:MongoDB.Entities.Template`2.ToArrayFilters">
            <summary>
            Executes the tag replacement and returns array filter definitions.
            <para>TIP: if all the tags don't match, an exception will be thrown.</para>
            </summary>
        </member>
        <member name="T:MongoDB.Entities.Template">
            <summary>
            A helper class to build a JSON command from a string with tag replacement
            </summary>
        </member>
        <member name="M:MongoDB.Entities.Template.#ctor(System.String)">
            <summary>
            Initialize a command builder with the supplied template string.
            </summary>
            <param name="template">The template string with tags for targeting replacements such as "&lt;Author.Name&gt;"</param>
        </member>
        <member name="M:MongoDB.Entities.Template.AppendStage(System.String)">
            <summary>
            Appends a pipeline stage json string to the current pipeline. 
            This method can only be used if the template was initialized with an array of pipeline stages. 
            If this is going to be the first stage of your pipeline, you must instantiate the template with an empty array string <c>new Template("[]")</c>
            </summary>
            <param name="pipelineStageString">The pipeline stage json string to append</param>
        </member>
        <member name="M:MongoDB.Entities.Template.Collection``1">
            <summary>
            Gets the collection name of a given entity type and replaces matching tags in the template such as "&lt;EntityName&gt;"
            </summary>
            <typeparam name="TEntity">The type of entity to get the collection name of</typeparam>
        </member>
        <member name="M:MongoDB.Entities.Template.Property``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            Turns the given member expression into a property name like "SomeProp" and replaces matching tags in the template such as "&lt;SomeProp&gt;"
            </summary>
            <param name="expression">x => x.RootProp.SomeProp</param>
        </member>
        <member name="M:MongoDB.Entities.Template.Path``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            Turns the given expression into a dotted path like "SomeList.SomeProp" and replaces matching tags in the template such as "&lt;SomeList.SomeProp&gt;"
            </summary>
            <param name="expression">x => x.SomeList[0].SomeProp</param>
        </member>
        <member name="M:MongoDB.Entities.Template.Paths``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            Turns the property paths in the given `new` expression into paths like "Prop1.Child1 &amp; Prop2.Child2" and replaces matching tags in the template.
            </summary>
            <param name="expression">x => new { x.Prop1.Child1, x.Prop2.Child2 }</param>
        </member>
        <member name="M:MongoDB.Entities.Template.PosFiltered``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            Turns the given expression into a positional filtered path like "Authors.$[a].Name" and replaces matching tags in the template such as "&lt;Authors.$[a].Name&gt;"
            <para>TIP: Index positions start from [0] which is converted to $[a] and so on.</para>
            </summary>
            <param name="expression">x => x.SomeList[0].SomeProp</param>
        </member>
        <member name="M:MongoDB.Entities.Template.PosAll``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            Turns the given expression into a path with the all positional operator like "Authors.$[].Name" and replaces matching tags in the template such as "&lt;Authors.$[].Name&gt;"
            </summary>
            <param name="expression">x => x.SomeList[0].SomeProp</param>
        </member>
        <member name="M:MongoDB.Entities.Template.PosFirst``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            Turns the given expression into a path with the first positional operator like "Authors.$.Name" and replaces matching tags in the template such as "&lt;Authors.$.Name&gt;"
            </summary>
            <param name="expression">x => x.SomeList[0].SomeProp</param>
        </member>
        <member name="M:MongoDB.Entities.Template.Elements``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            Turns the given expression into a path without any filtered positional identifier prepended to it like "Name" and replaces matching tags in the template such as "&lt;Name&gt;"
            </summary>
            <param name="expression">x => x.SomeProp</param>
        </member>
        <member name="M:MongoDB.Entities.Template.Elements``1(System.Int32,System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            Turns the given index and expression into a path with the filtered positional identifier prepended to the property path like "a.Name" and replaces matching tags in the template such as "&lt;a.Name&gt;"
            </summary>
            <param name="index">0=a 1=b 2=c 3=d and so on...</param>
            <param name="expression">x => x.SomeProp</param>
        </member>
        <member name="M:MongoDB.Entities.Template.Tag(System.String,System.String)">
            <summary>
            Replaces the given tag in the template like "&lt;search_term&gt;" with the supplied value.
            </summary>
            <param name="tagName">The tag name without the surrounding &lt; and &gt;</param>
            <param name="replacementValue">The value to replace with</param>
        </member>
        <member name="M:MongoDB.Entities.Template.ToString">
            <summary>
            Executes the tag replacement and returns a string.
            <para>TIP: if all the tags don't match, an exception will be thrown.</para>
            </summary>
        </member>
        <member name="M:MongoDB.Entities.Template.ToStages">
            <summary>
            Executes the tag replacement and returns the pipeline stages as an array of BsonDocuments.
            <para>TIP: if all the tags don't match, an exception will be thrown.</para>
            </summary>
        </member>
        <member name="M:MongoDB.Entities.Template.ToPipeline``2">
            <summary>
            Executes the tag replacement and returns a pipeline definition.
            <para>TIP: if all the tags don't match, an exception will be thrown.</para>
            </summary>
            <typeparam name="TInput">The input type</typeparam>
            <typeparam name="TOutput">The output type</typeparam>
        </member>
        <member name="M:MongoDB.Entities.Template.ToArrayFilters``1">
            <summary>
            Executes the tag replacement and returns array filter definitions.
            <para>TIP: if all the tags don't match, an exception will be thrown.</para>
            </summary>
        </member>
        <member name="T:MongoDB.Entities.Transaction">
            <summary>
            Represents a transaction used to carry out inter-related write operations.
            <para>TIP: Remember to always call .Dispose() after use or enclose in a 'Using' statement.</para>
            <para>IMPORTANT: Use the methods on this transaction to perform operations and not the methods on the DB class.</para>
            </summary>
        </member>
        <member name="M:MongoDB.Entities.Transaction.#ctor(System.String,MongoDB.Driver.ClientSessionOptions,MongoDB.Entities.ModifiedBy)">
            <summary>
            Instantiates and begins a transaction.
            </summary>
            <param name="database">The name of the database to use for this transaction. default db is used if not specified</param>
            <param name="options">Client session options for this transaction</param>
            <param name="modifiedBy">An optional ModifiedBy instance. 
            When supplied, all save/update operations performed via this DBContext instance will set the value on entities that has a property of type ModifiedBy. 
            You can inherit from the ModifiedBy class and add your own properties to it. 
            Only one ModifiedBy property is allowed on a single entity type.</param>
        </member>
        <member name="M:MongoDB.Entities.Transaction.CommitAsync(System.Threading.CancellationToken)">
            <summary>
            Commits a transaction to MongoDB
            </summary>
            <param name="cancellation">An optional cancellation token</param>
        </member>
        <member name="M:MongoDB.Entities.Transaction.AbortAsync(System.Threading.CancellationToken)">
            <summary>
            Aborts and rolls back a transaction
            </summary>
            <param name="cancellation">An optional cancellation token</param>
        </member>
        <member name="T:MongoDB.Entities.DB">
            <summary>
            The main entrypoint for all data access methods of the library
            </summary>
        </member>
        <member name="M:MongoDB.Entities.DB.Collection``1">
            <summary>
            Gets the IMongoCollection for a given IEntity type.
            <para>TIP: Try never to use this unless really necessary.</para>
            </summary>
            <typeparam name="T">Any class that implements IEntity</typeparam>
        </member>
        <member name="M:MongoDB.Entities.DB.CollectionName``1">
            <summary>
            Gets the collection name for a given entity type
            </summary>
            <typeparam name="T">The type of entity to get the collection name for</typeparam>
        </member>
        <member name="M:MongoDB.Entities.DB.DropCollectionAsync``1(MongoDB.Driver.IClientSessionHandle)">
            <summary>
            Deletes the collection of a given entity type as well as the join collections for that entity.
            <para>TIP: When deleting a collection, all relationships associated with that entity type is also deleted.</para>
            </summary>
            <typeparam name="T">The entity type to drop the collection of</typeparam>
            <param name="session">An optional session if using within a transaction</param>
        </member>
        <member name="M:MongoDB.Entities.DB.CountEstimatedAsync``1(System.Threading.CancellationToken)">
            <summary>
            Gets a fast estimation of how many documents are in the collection using metadata.
            <para>HINT: The estimation may not be exactly accurate.</para>
            </summary>
            <typeparam name="T">The entity type to get the count for</typeparam>
            <param name="cancellation">An optional cancellation token</param>
        </member>
        <member name="M:MongoDB.Entities.DB.CountAsync``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},MongoDB.Driver.IClientSessionHandle,System.Threading.CancellationToken)">
            <summary>
            Gets an accurate count of how many entities are matched for a given expression/filter
            </summary>
            <typeparam name="T">The entity type to get the count for</typeparam>
            <param name="expression">A lambda expression for getting the count for a subset of the data</param>
            <param name="session">An optional session if using within a transaction</param>
            <param name="cancellation">An optional cancellation token</param>
        </member>
        <member name="M:MongoDB.Entities.DB.CountAsync``1(MongoDB.Driver.FilterDefinition{``0},MongoDB.Driver.IClientSessionHandle,System.Threading.CancellationToken)">
            <summary>
            Gets an accurate count of how many total entities are in the collection for a given entity type
            </summary>
            <typeparam name="T">The entity type to get the count for</typeparam>
            <param name="filter">A filter definition</param>
            <param name="session">An optional session if using within a transaction</param>
            <param name="cancellation">An optional cancellation token</param>
        </member>
        <member name="M:MongoDB.Entities.DB.CountAsync``1(System.Func{MongoDB.Driver.FilterDefinitionBuilder{``0},MongoDB.Driver.FilterDefinition{``0}},MongoDB.Driver.IClientSessionHandle,System.Threading.CancellationToken)">
            <summary>
            Gets an accurate count of how many total entities are in the collection for a given entity type
            </summary>
            <typeparam name="T">The entity type to get the count for</typeparam>
            <param name="filter">f => f.Eq(x => x.Prop, Value) &amp; f.Gt(x => x.Prop, Value)</param>
            <param name="session">An optional session if using within a transaction</param>
            <param name="cancellation">An optional cancellation token</param>
        </member>
        <member name="M:MongoDB.Entities.DB.CountAsync``1(MongoDB.Driver.IClientSessionHandle,System.Threading.CancellationToken)">
            <summary>
            Gets an accurate count of how many total entities are in the collection for a given entity type
            </summary>
            <typeparam name="T">The entity type to get the count for</typeparam>
            <param name="session">An optional session if using within a transaction</param>
            <param name="cancellation">An optional cancellation token</param>
        </member>
        <member name="M:MongoDB.Entities.DB.InitAsync(System.String,System.String,System.Int32)">
            <summary>
            Initializes a MongoDB connection with the given connection parameters.
            You can call this method as many times as you want (such as in serverless functions) with the same parameters and the connections won't get duplicated.
            </summary>
            <param name="database">Name of the database</param>
            <param name="host">Address of the MongoDB server</param>
            <param name="port">Port number of the server</param>
        </member>
        <member name="M:MongoDB.Entities.DB.InitAsync(System.String,MongoDB.Driver.MongoClientSettings)">
            <summary>
            Initializes a MongoDB connection with the given connection parameters.
            You can call this method as many times as you want (such as in serverless functions) with the same parameters and the connections won't get duplicated.
            </summary>
            <param name="database">Name of the database</param>
            <param name="settings">A MongoClientSettings object</param>
        </member>
        <member name="M:MongoDB.Entities.DB.DatabaseFor``1(System.String)">
            <summary>
            Specifies the database that a given entity type should be stored in. 
            Only needed for entity types you want stored in a db other than the default db.
            </summary>
            <typeparam name="T">Any class that implements IEntity</typeparam>
            <param name="database">The name of the database</param>
        </member>
        <member name="M:MongoDB.Entities.DB.Database``1">
            <summary>
            Gets the IMongoDatabase for the given entity type
            </summary>
            <typeparam name="T">The type of entity</typeparam>
        </member>
        <member name="M:MongoDB.Entities.DB.Database(System.String)">
            <summary>
            Gets the IMongoDatabase for a given database name if it has been previously initialized.
            You can also get the default database by passing 'default' or 'null' for the name parameter.
            </summary>
            <param name="name">The name of the database to retrieve</param>
        </member>
        <member name="M:MongoDB.Entities.DB.DatabaseName``1">
            <summary>
            Gets the name of the database a given entity type is attached to. Returns name of default database if not specifically attached.
            </summary>
            <typeparam name="T">Any class that implements IEntity</typeparam>
        </member>
        <member name="M:MongoDB.Entities.DB.ChangeDefaultDatabase(System.String)">
            <summary>
            Switches the default database at runtime
            <para>WARNING: Use at your own risk!!! Might result in entities getting saved in the wrong databases under high concurrency situations.</para>
            <para>TIP: Make sure to cancel any watchers (change-streams) before switching the default database.</para>
            </summary>
            <param name="name">The name of the database to mark as the new default database</param>
        </member>
        <member name="M:MongoDB.Entities.DB.Filter``1">
            <summary>
            Exposes the mongodb Filter Definition Builder for a given type.
            </summary>
            <typeparam name="T">Any class that implements IEntity</typeparam>
        </member>
        <member name="M:MongoDB.Entities.DB.Sort``1">
            <summary>
            Exposes the mongodb Sort Definition Builder for a given type.
            </summary>
            <typeparam name="T">Any class that implements IEntity</typeparam>
        </member>
        <member name="M:MongoDB.Entities.DB.Projection``1">
            <summary>
            Exposes the mongodb Projection Definition Builder for a given type.
            </summary>
            <typeparam name="T">Any class that implements IEntity</typeparam>
        </member>
        <member name="M:MongoDB.Entities.DB.Entity``1">
            <summary>
            Returns a new instance of the supplied IEntity type
            </summary>
            <typeparam name="T">Any class that implements IEntity</typeparam>
        </member>
        <member name="M:MongoDB.Entities.DB.Entity``1(System.String)">
            <summary>
            Returns a new instance of the supplied IEntity type with the ID set to the supplied value
            </summary>
            <typeparam name="T">Any class that implements IEntity</typeparam>
            <param name="ID">The ID to set on the returned instance</param>
        </member>
        <member name="M:MongoDB.Entities.DB.DeleteAsync``1(System.String,MongoDB.Driver.IClientSessionHandle,System.Threading.CancellationToken)">
            <summary>
            Deletes a single entity from MongoDB.
            <para>HINT: If this entity is referenced by one-to-many/many-to-many relationships, those references are also deleted.</para>
            </summary>
            <typeparam name="T">Any class that implements IEntity</typeparam>
            <param name="ID">The Id of the entity to delete</param>
            <param name = "session" >An optional session if using within a transaction</param>
            <param name="cancellation">An optional cancellation token</param>
        </member>
        <member name="M:MongoDB.Entities.DB.DeleteAsync``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},MongoDB.Driver.IClientSessionHandle,System.Threading.CancellationToken)">
            <summary>
            Deletes matching entities with an expression
            <para>HINT: If the expression matches more than 100,000 entities, they will be deleted in batches of 100k.</para>
            <para>HINT: If these entities are referenced by one-to-many/many-to-many relationships, those references are also deleted.</para>
            </summary>
            <typeparam name="T">Any class that implements IEntity</typeparam>
            <param name="expression">A lambda expression for matching entities to delete.</param>
            <param name = "session" >An optional session if using within a transaction</param>
            <param name="cancellation">An optional cancellation token</param>
        </member>
        <member name="M:MongoDB.Entities.DB.DeleteAsync``1(System.Collections.Generic.IEnumerable{System.String},MongoDB.Driver.IClientSessionHandle,System.Threading.CancellationToken)">
            <summary>
            Deletes entities using a collection of IDs
            <para>HINT: If more than 100,000 IDs are passed in, they will be processed in batches of 100k.</para>
            <para>HINT: If these entities are referenced by one-to-many/many-to-many relationships, those references are also deleted.</para>
            </summary>
            <typeparam name="T">Any class that implements IEntity</typeparam>
            <param name="IDs">An IEnumerable of entity IDs</param>
            <param name = "session" > An optional session if using within a transaction</param>
            <param name="cancellation">An optional cancellation token</param>
        </member>
        <member name="M:MongoDB.Entities.DB.File``1(System.String)">
            <summary>
            Returns a DataStreamer object to enable downloading file data directly by supplying the ID of the file entity
            </summary>
            <typeparam name="T">The file entity type</typeparam>
            <param name="ID">The ID of the file entity</param>
        </member>
        <member name="M:MongoDB.Entities.DB.Find``1(MongoDB.Driver.IClientSessionHandle)">
            <summary>
            Represents a MongoDB Find command
            <para>TIP: Specify your criteria using .Match() .Sort() .Skip() .Take() .Project() .Option() methods and finally call .Execute()</para>
            </summary>
            <typeparam name="T">Any class that implements IEntity</typeparam>
            <param name="session">An optional session if using within a transaction</param>
        </member>
        <member name="M:MongoDB.Entities.DB.Find``2(MongoDB.Driver.IClientSessionHandle)">
            <summary>
            Represents a MongoDB Find command
            <para>TIP: Specify your criteria using .Match() .Sort() .Skip() .Take() .Project() .Option() methods and finally call .Execute()</para>
            </summary>
            <typeparam name="T">Any class that implements IEntity</typeparam>
            <typeparam name="TProjection">The type that is returned by projection</typeparam>
            <param name="session">An optional session if using within a transaction</param>
        </member>
        <member name="M:MongoDB.Entities.DB.Fluent``1(MongoDB.Driver.AggregateOptions,MongoDB.Driver.IClientSessionHandle)">
            <summary>
            Exposes the MongoDB collection for the given IEntity as an IAggregateFluent in order to facilitate Fluent queries.
            </summary>
            <typeparam name="T">Any class that implements IEntity</typeparam>
            <param name="options">The options for the aggregation. This is not required.</param>
            <param name="session">An optional session if using within a transaction</param>
        </member>
        <member name="M:MongoDB.Entities.DB.FluentTextSearch``1(MongoDB.Entities.Search,System.String,System.Boolean,System.Boolean,System.String,MongoDB.Driver.AggregateOptions,MongoDB.Driver.IClientSessionHandle)">
            <summary>
            Start a fluent aggregation pipeline with a $text stage with the supplied parameters.
            <para>TIP: Make sure to define a text index with DB.Index&lt;T&gt;() before searching</para>
            </summary>
            <param name="searchType">The type of text matching to do</param>
            <param name="searchTerm">The search term</param>
            <param name="caseSensitive">Case sensitivity of the search (optional)</param>
            <param name="diacriticSensitive">Diacritic sensitivity of the search (optional)</param>
            <param name="language">The language for the search (optional)</param>
            <param name="options">Options for finding documents (not required)</param>
            <param name="session">An optional session if using within a transaction</param>
        </member>
        <member name="M:MongoDB.Entities.DB.FluentGeoNear``1(MongoDB.Entities.Coordinates2D,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Boolean,System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Int32},MongoDB.Bson.BsonDocument,System.Nullable{System.Double},System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.String,MongoDB.Driver.AggregateOptions,MongoDB.Driver.IClientSessionHandle)">
            <summary>
            Start a fluent aggregation pipeline with a $GeoNear stage with the supplied parameters.
            </summary>
            <param name="NearCoordinates">The coordinates from which to find documents from</param>
            <param name="DistanceField">x => x.Distance</param>
            <param name="Spherical">Calculate distances using spherical geometry or not</param>
            <param name="MaxDistance">The maximum distance in meters from the center point that the documents can be</param>
            <param name="MinDistance">The minimum distance in meters from the center point that the documents can be</param>
            <param name="Limit">The maximum number of documents to return</param>
            <param name="Query">Limits the results to the documents that match the query</param>
            <param name="DistanceMultiplier">The factor to multiply all distances returned by the query</param>
            <param name="IncludeLocations">Specify the output field to store the point used to calculate the distance</param>
            <param name="IndexKey"></param>
            <param name="options">The options for the aggregation. This is not required.</param>
            <param name="session">An optional session if using within a transaction</param>
        </member>
        <member name="M:MongoDB.Entities.DB.Index``1">
            <summary>
            Represents an index for a given IEntity
            <para>TIP: Define the keys first with .Key() method and finally call the .Create() method.</para>
            </summary>
            <typeparam name="T">Any class that implements IEntity</typeparam>
        </member>
        <member name="M:MongoDB.Entities.DB.MigrateAsync``1">
            <summary>
            Discover and run migrations from the same assembly as the specified type.
            </summary>
            <typeparam name="T">A type that is from the same assembly as the migrations you want to run</typeparam>
        </member>
        <member name="M:MongoDB.Entities.DB.MigrateAsync">
            <summary>
            Executes migration classes that implement the IMigration interface in the correct order to transform the database.
            <para>TIP: Write classes with names such as: _001_rename_a_field.cs, _002_delete_a_field.cs, etc. and implement IMigration interface on them. Call this method at the startup of the application in order to run the migrations.</para>
            </summary>
        </member>
        <member name="M:MongoDB.Entities.DB.PipelineCursorAsync``2(MongoDB.Entities.Template{``0,``1},MongoDB.Driver.AggregateOptions,MongoDB.Driver.IClientSessionHandle,System.Threading.CancellationToken)">
            <summary>
            Executes an aggregation pipeline by supplying a 'Template' object and returns a cursor
            </summary>
            <typeparam name="T">Any class that implements IEntity</typeparam>
            <typeparam name="TResult">The type of the resulting objects</typeparam>
            <param name="template">A 'Template' object with tags replaced</param>
            <param name="options">The options for the aggregation. This is not required.</param>
            <param name="session">An optional session if using within a transaction</param>
            <param name="cancellation">An optional cancellation token</param>
        </member>
        <member name="M:MongoDB.Entities.DB.PipelineAsync``2(MongoDB.Entities.Template{``0,``1},MongoDB.Driver.AggregateOptions,MongoDB.Driver.IClientSessionHandle,System.Threading.CancellationToken)">
            <summary>
            Executes an aggregation pipeline by supplying a 'Template' object and get a list of results
            </summary>
            <typeparam name="T">Any class that implements IEntity</typeparam>
            <typeparam name="TResult">The type of the resulting objects</typeparam>
            <param name="template">A 'Template' object with tags replaced</param>
            <param name="options">The options for the aggregation. This is not required.</param>
            <param name="session">An optional session if using within a transaction</param>
            <param name="cancellation">An optional cancellation token</param>
        </member>
        <member name="M:MongoDB.Entities.DB.PipelineSingleAsync``2(MongoDB.Entities.Template{``0,``1},MongoDB.Driver.AggregateOptions,MongoDB.Driver.IClientSessionHandle,System.Threading.CancellationToken)">
            <summary>
            Executes an aggregation pipeline by supplying a 'Template' object and get a single result or default value if not found.
            </summary>
            <typeparam name="T">Any class that implements IEntity</typeparam>
            <typeparam name="TResult">The type of the resulting object</typeparam>
            <param name="template">A 'Template' object with tags replaced</param>
            <param name="options">The options for the aggregation. This is not required.</param>
            <param name="session">An optional session if using within a transaction</param>
            <param name="cancellation">An optional cancellation token</param>
        </member>
        <member name="M:MongoDB.Entities.DB.PipelineFirstAsync``2(MongoDB.Entities.Template{``0,``1},MongoDB.Driver.AggregateOptions,MongoDB.Driver.IClientSessionHandle,System.Threading.CancellationToken)">
            <summary>
            Executes an aggregation pipeline by supplying a 'Template' object and get the first result or default value if not found.
            </summary>
            <typeparam name="T">Any class that implements IEntity</typeparam>
            <typeparam name="TResult">The type of the resulting object</typeparam>
            <param name="template">A 'Template' object with tags replaced</param>
            <param name="options">The options for the aggregation. This is not required.</param>
            <param name="session">An optional session if using within a transaction</param>
            <param name="cancellation">An optional cancellation token</param>
        </member>
        <member name="M:MongoDB.Entities.DB.Queryable``1(MongoDB.Driver.AggregateOptions,MongoDB.Driver.IClientSessionHandle)">
            <summary>
            Exposes the MongoDB collection for the given IEntity as an IQueryable in order to facilitate LINQ queries.
            </summary>
            <param name="options">The aggregate options</param>
            <param name="session">An optional session if used within a transaction</param>
            <typeparam name="T">Any class that implements IEntity</typeparam>
        </member>
        <member name="M:MongoDB.Entities.DB.SaveAsync``1(``0,MongoDB.Driver.IClientSessionHandle,System.Threading.CancellationToken)">
            <summary>
            Saves a complete entity replacing an existing entity or creating a new one if it does not exist. 
            If ID value is null, a new entity is created. If ID has a value, then existing entity is replaced.
            </summary>
            <typeparam name="T">Any class that implements IEntity</typeparam>
            <param name="entity">The instance to persist</param>
            <param name="session">An optional session if using within a transaction</param>
            <param name="cancellation">And optional cancellation token</param>
        </member>
        <member name="M:MongoDB.Entities.DB.SaveAsync``1(System.Collections.Generic.IEnumerable{``0},MongoDB.Driver.IClientSessionHandle,System.Threading.CancellationToken)">
            <summary>
            Saves a batch of complete entities replacing existing ones or creating new ones if they do not exist. 
            If ID value is null, a new entity is created. If ID has a value, then existing entity is replaced.
            </summary>
            <typeparam name="T">Any class that implements IEntity</typeparam>
            <param name="entities">The entities to persist</param>
            <param name="session">An optional session if using within a transaction</param>
            <param name="cancellation">And optional cancellation token</param>
        </member>
        <member name="M:MongoDB.Entities.DB.SaveOnlyAsync``1(``0,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},MongoDB.Driver.IClientSessionHandle,System.Threading.CancellationToken)">
            <summary>
            Saves an entity partially with only the specified subset of properties. 
            If ID value is null, a new entity is created. If ID has a value, then existing entity is updated.
            <para>TIP: The properties to be saved can be specified with a 'New' expression. 
            You can only specify root level properties with the expression.</para>
            </summary>
            <typeparam name="T">Any class that implements IEntity</typeparam>
            <param name="entity">The entity to save</param>
            <param name="members">x => new { x.PropOne, x.PropTwo }</param>
            <param name="session">An optional session if using within a transaction</param>
            <param name="cancellation">An optional cancellation token</param>
        </member>
        <member name="M:MongoDB.Entities.DB.SaveOnlyAsync``1(System.Collections.Generic.IEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Object}},MongoDB.Driver.IClientSessionHandle,System.Threading.CancellationToken)">
            <summary>
            Saves a batch of entities partially with only the specified subset of properties. 
            If ID value is null, a new entity is created. If ID has a value, then existing entity is updated.
            <para>TIP: The properties to be saved can be specified with a 'New' expression. 
            You can only specify root level properties with the expression.</para>
            </summary>
            <typeparam name="T">Any class that implements IEntity</typeparam>
            <param name="entities">The batch of entities to save</param>
            <param name="members">x => new { x.PropOne, x.PropTwo }</param>
            <param name="session">An optional session if using within a transaction</param>
            <param name="cancellation">An optional cancellation token</param>
        </member>
        <member name="M:MongoDB.Entities.DB.SaveExceptAsync``1(``0,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},MongoDB.Driver.IClientSessionHandle,System.Threading.CancellationToken)">
            <summary>
            Saves an entity partially excluding the specified subset of properties. 
            If ID value is null, a new entity is created. If ID has a value, then existing entity is updated.
            <para>TIP: The properties to be excluded can be specified with a 'New' expression. 
            You can only specify root level properties with the expression.</para>
            </summary>
            <typeparam name="T">Any class that implements IEntity</typeparam>
            <param name="entity">The entity to save</param>
            <param name="members">x => new { x.PropOne, x.PropTwo }</param>
            <param name="session">An optional session if using within a transaction</param>
            <param name="cancellation">An optional cancellation token</param>
        </member>
        <member name="M:MongoDB.Entities.DB.SaveExceptAsync``1(System.Collections.Generic.IEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Object}},MongoDB.Driver.IClientSessionHandle,System.Threading.CancellationToken)">
            <summary>
            Saves a batch of entities partially excluding the specified subset of properties. 
            If ID value is null, a new entity is created. If ID has a value, then existing entity is updated.
            <para>TIP: The properties to be excluded can be specified with a 'New' expression. 
            You can only specify root level properties with the expression.</para>
            </summary>
            <typeparam name="T">Any class that implements IEntity</typeparam>
            <param name="entities">The batch of entities to save</param>
            <param name="members">x => new { x.PropOne, x.PropTwo }</param>
            <param name="session">An optional session if using within a transaction</param>
            <param name="cancellation">An optional cancellation token</param>
        </member>
        <member name="M:MongoDB.Entities.DB.SavePreservingAsync``1(``0,MongoDB.Driver.IClientSessionHandle,System.Threading.CancellationToken)">
            <summary>
            Saves an entity partially while excluding some properties. 
            The properties to be excluded can be specified using the [Preserve] or [DontPreserve] attributes.
            </summary>
            <typeparam name="T">Any class that implements IEntity</typeparam>
            <param name="entity">The entity to save</param>
            <param name="session">An optional session if using within a transaction</param>
            <param name="cancellation">An optional cancellation token</param>
        </member>
        <member name="M:MongoDB.Entities.DB.NextSequentialNumberAsync``1(System.Threading.CancellationToken)">
            <summary>
            Returns an atomically generated sequential number for the given Entity type everytime the method is called
            </summary>
            <typeparam name="T">The type of entity to get the next sequential number for</typeparam>
            <param name="cancellation">An optional cancellation token</param>
        </member>
        <member name="M:MongoDB.Entities.DB.NextSequentialNumberAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Returns an atomically generated sequential number for the given sequence name everytime the method is called
            </summary>
            <param name="sequenceName">The name of the sequence to get the next number for</param>
            <param name="cancellation">An optional cancellation token</param>
        </member>
        <member name="M:MongoDB.Entities.DB.Transaction(System.String,MongoDB.Driver.ClientSessionOptions,MongoDB.Entities.ModifiedBy)">
            <summary>
            Gets a transaction context/scope for a given database or the default database if not specified.
            </summary>
            <param name="database">The name of the database which this transaction is for (not required)</param>
            <param name="options">Client session options (not required)</param>
        </member>
        <member name="M:MongoDB.Entities.DB.Transaction``1(MongoDB.Driver.ClientSessionOptions,MongoDB.Entities.ModifiedBy)">
            <summary>
            Gets a transaction context/scope for a given entity type's database
            </summary>
            <typeparam name="T">The entity type to determine the database from for the transaction</typeparam>
            <param name="options">Client session options (not required)</param>
        </member>
        <member name="M:MongoDB.Entities.DB.Update``1(MongoDB.Driver.IClientSessionHandle)">
            <summary>
            Represents an update command
            <para>TIP: Specify a filter first with the .Match() method. Then set property values with .Modify() and finally call .Execute() to run the command.</para>
            </summary>
            <typeparam name="T">Any class that implements IEntity</typeparam>
            <param name="session">An optional session if using within a transaction</param>
        </member>
        <member name="M:MongoDB.Entities.DB.UpdateAndGet``2(MongoDB.Driver.IClientSessionHandle)">
            <summary>
            Update and retrieve the first document that was updated.
            <para>TIP: Specify a filter first with the .Match(). Then set property values with .Modify() and finally call .Execute() to run the command.</para>
            </summary>
            <typeparam name="T">Any class that implements IEntity</typeparam>
            <typeparam name="TProjection">The type to project to</typeparam>
            <param name="session">An optional session if using within a transaction</param>
        </member>
        <member name="M:MongoDB.Entities.DB.UpdateAndGet``1(MongoDB.Driver.IClientSessionHandle)">
            <summary>
            Update and retrieve the first document that was updated.
            <para>TIP: Specify a filter first with the .Match(). Then set property values with .Modify() and finally call .Execute() to run the command.</para>
            </summary>
            <typeparam name="T">Any class that implements IEntity</typeparam>
            <param name="session">An optional session if using within a transaction</param>
        </member>
        <member name="M:MongoDB.Entities.DB.Watcher``1(System.String)">
            <summary>
            Retrieves the 'change-stream' watcher instance for a given unique name. 
            If an instance for the name does not exist, it will return a new instance. 
            If an instance already exists, that instance will be returned.
            </summary>
            <typeparam name="T">The entity type to get a watcher for</typeparam>
            <param name="name">A unique name for the watcher of this entity type. Names can be duplicate among different entity types.</param>
        </member>
        <member name="M:MongoDB.Entities.DB.Watchers``1">
            <summary>
            Returns all the watchers for a given entity type
            </summary>
            <typeparam name="T">The entity type to get the watcher of</typeparam>
        </member>
        <member name="T:MongoDB.Entities.IMigration">
            <summary>
            The contract for writing user data migration classes
            </summary>
        </member>
        <member name="T:MongoDB.Entities.Migration">
            <summary>
            Represents a migration history item in the database
            </summary>
        </member>
        <member name="T:MongoDB.Entities.JoinRecord">
            <summary>
            Represents a parent-child relationship between two entities.
            <para>TIP: The ParentID and ChildID switches around for many-to-many relationships depending on the side of the relationship you're accessing.</para>
            </summary>
        </member>
        <member name="P:MongoDB.Entities.JoinRecord.ParentID">
            <summary>
            The ID of the parent IEntity for both one-to-many and the owner side of many-to-many relationships.
            </summary>
        </member>
        <member name="P:MongoDB.Entities.JoinRecord.ChildID">
            <summary>
            The ID of the child IEntity in one-to-many relationships and the ID of the inverse side IEntity in many-to-many relationships.
            </summary>
        </member>
        <member name="T:MongoDB.Entities.ManyBase">
            <summary>
            Base class providing shared state for Many'1 classes
            </summary>
        </member>
        <member name="T:MongoDB.Entities.Many`1">
            <summary>
            Represents a one-to-many/many-to-many relationship between two Entities.
            <para>WARNING: You have to initialize all instances of this class before accessing any of it's members.</para>
            <para>Initialize from the constructor of the parent entity as follows:</para>
            <c>this.InitOneToMany(() => Property)</c>
            <c>this.InitManyToMany(() => Property, x => x.OtherProperty)</c>
            </summary>
            <typeparam name="TChild">Type of the child IEntity.</typeparam>
        </member>
        <member name="M:MongoDB.Entities.Many`1.GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:MongoDB.Entities.Many`1.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="P:MongoDB.Entities.Many`1.JoinCollection">
            <summary>
            Gets the IMongoCollection of JoinRecords for this relationship.
            <para>TIP: Try never to use this unless really neccessary.</para>
            </summary>
        </member>
        <member name="M:MongoDB.Entities.Many`1.JoinQueryable(MongoDB.Driver.IClientSessionHandle,MongoDB.Driver.AggregateOptions)">
            <summary>
            An IQueryable of JoinRecords for this relationship
            </summary>
            <param name="session">An optional session if using within a transaction</param>
            <param name="options">An optional AggregateOptions object</param>
        </member>
        <member name="M:MongoDB.Entities.Many`1.JoinFluent(MongoDB.Driver.IClientSessionHandle,MongoDB.Driver.AggregateOptions)">
            <summary>
            An IAggregateFluent of JoinRecords for this relationship
            </summary>
            <param name="session">An optional session if using within a transaction</param>
            <param name="options">An optional AggregateOptions object</param>
        </member>
        <member name="M:MongoDB.Entities.Many`1.ParentsQueryable``1(System.String,MongoDB.Driver.IClientSessionHandle,MongoDB.Driver.AggregateOptions)">
            <summary>
            Get an IQueryable of parents matching a single child ID for this relationship.
            </summary>
            <typeparam name="TParent">The type of the parent IEntity</typeparam>
            <param name="childID">A child ID</param>
            <param name="session">An optional session if using within a transaction</param>
            <param name="options">An optional AggregateOptions object</param>
        </member>
        <member name="M:MongoDB.Entities.Many`1.ParentsQueryable``1(System.Collections.Generic.IEnumerable{System.String},MongoDB.Driver.IClientSessionHandle,MongoDB.Driver.AggregateOptions)">
            <summary>
            Get an IQueryable of parents matching multiple child IDs for this relationship.
            </summary>
            <typeparam name="TParent">The type of the parent IEntity</typeparam>
            <param name="childIDs">An IEnumerable of child IDs</param>
            <param name="session">An optional session if using within a transaction</param>
            <param name="options">An optional AggregateOptions object</param>
        </member>
        <member name="M:MongoDB.Entities.Many`1.ParentsQueryable``1(MongoDB.Driver.Linq.IMongoQueryable{`0},MongoDB.Driver.IClientSessionHandle,MongoDB.Driver.AggregateOptions)">
            <summary>
            Get an IQueryable of parents matching a supplied IQueryable of children for this relationship.
            </summary>
            <typeparam name="TParent">The type of the parent IEntity</typeparam>
            <param name="children">An IQueryable of children</param>
            <param name="session">An optional session if using within a transaction</param>
            <param name="options">An optional AggregateOptions object</param>
        </member>
        <member name="M:MongoDB.Entities.Many`1.ParentsFluent``1(MongoDB.Driver.IAggregateFluent{`0})">
            <summary>
            Get an IAggregateFluent of parents matching a supplied IAggregateFluent of children for this relationship.
            </summary>
            <typeparam name="TParent">The type of the parent IEntity</typeparam>
            <param name="children">An IAggregateFluent of children</param>
        </member>
        <member name="M:MongoDB.Entities.Many`1.ParentsFluent``1(System.String,MongoDB.Driver.IClientSessionHandle,MongoDB.Driver.AggregateOptions)">
            <summary>
            Get an IAggregateFluent of parents matching a single child ID for this relationship.
            </summary>
            <typeparam name="TParent">The type of the parent IEntity</typeparam>
            <param name="childID">An child ID</param>
            <param name="session">An optional session if using within a transaction</param>
            <param name="options">An optional AggregateOptions object</param>
        </member>
        <member name="M:MongoDB.Entities.Many`1.ParentsFluent``1(System.Collections.Generic.IEnumerable{System.String},MongoDB.Driver.IClientSessionHandle,MongoDB.Driver.AggregateOptions)">
            <summary>
            Get an IAggregateFluent of parents matching multiple child IDs for this relationship.
            </summary>
            <typeparam name="TParent">The type of the parent IEntity</typeparam>
            <param name="childIDs">An IEnumerable of child IDs</param>
            <param name="session">An optional session if using within a transaction</param>
            <param name="options">An optional AggregateOptions object</param>
        </member>
        <member name="M:MongoDB.Entities.Many`1.ChildrenCountAsync(MongoDB.Driver.IClientSessionHandle,MongoDB.Driver.CountOptions,System.Threading.CancellationToken)">
            <summary>
            Get the number of children for a relationship
            </summary>
            <param name="session">An optional session if using within a transaction</param>
            <param name="options">An optional AggregateOptions object</param>
            <param name="cancellation">An optional cancellation token</param>
        </member>
        <member name="M:MongoDB.Entities.Many`1.ChildrenQueryable(MongoDB.Driver.IClientSessionHandle,MongoDB.Driver.AggregateOptions)">
            <summary>
            An IQueryable of child Entities for the parent.
            </summary>
            <param name="session">An optional session if using within a transaction</param>
            <param name="options">An optional AggregateOptions object</param>
        </member>
        <member name="M:MongoDB.Entities.Many`1.ChildrenFluent(MongoDB.Driver.IClientSessionHandle,MongoDB.Driver.AggregateOptions)">
            <summary>
            An IAggregateFluent of child Entities for the parent.
            </summary>
            <param name="session">An optional session if using within a transaction</param>
            <param name="options">An optional AggregateOptions object</param>
        </member>
        <member name="M:MongoDB.Entities.Many`1.AddAsync(`0,MongoDB.Driver.IClientSessionHandle,System.Threading.CancellationToken)">
            <summary>
            Adds a new child reference.
            <para>WARNING: Make sure to save the parent and child Entities before calling this method.</para>
            </summary>
            <param name="child">The child Entity to add.</param>
            <param name="session">An optional session if using within a transaction</param>
            <param name="cancellation">An optional cancellation token</param>
        </member>
        <member name="M:MongoDB.Entities.Many`1.AddAsync(System.Collections.Generic.IEnumerable{`0},MongoDB.Driver.IClientSessionHandle,System.Threading.CancellationToken)">
            <summary>
            Adds multiple child references in a single bulk operation
            <para>WARNING: Make sure to save the parent and child Entities before calling this method.</para>
            </summary>
            <param name="children">The child Entities to add</param>
            <param name="session">An optional session if using within a transaction</param>
            <param name="cancellation">An optional cancellation token</param>
        </member>
        <member name="M:MongoDB.Entities.Many`1.AddAsync(System.String,MongoDB.Driver.IClientSessionHandle,System.Threading.CancellationToken)">
            <summary>
            Adds a new child reference.
            <para>WARNING: Make sure to save the parent and child Entities before calling this method.</para>
            </summary>
            <param name="childID">The ID of the child Entity to add.</param>
            <param name="session">An optional session if using within a transaction</param>
            <param name="cancellation">An optional cancellation token</param>
        </member>
        <member name="M:MongoDB.Entities.Many`1.AddAsync(System.Collections.Generic.IEnumerable{System.String},MongoDB.Driver.IClientSessionHandle,System.Threading.CancellationToken)">
            <summary>
            Adds multiple child references in a single bulk operation
            <para>WARNING: Make sure to save the parent and child Entities before calling this method.</para>
            </summary>
            <param name="childIDs">The IDs of the child Entities to add.</param>
            <param name="session">An optional session if using within a transaction</param>
            <param name="cancellation">An optional cancellation token</param>
        </member>
        <member name="M:MongoDB.Entities.Many`1.RemoveAsync(`0,MongoDB.Driver.IClientSessionHandle,System.Threading.CancellationToken)">
            <summary>
            Removes a child reference.
            </summary>
            <param name="child">The child IEntity to remove the reference of.</param>
            <param name="session">An optional session if using within a transaction</param>
            <param name="cancellation">An optional cancellation token</param>
        </member>
        <member name="M:MongoDB.Entities.Many`1.RemoveAsync(System.String,MongoDB.Driver.IClientSessionHandle,System.Threading.CancellationToken)">
            <summary>
            Removes a child reference.
            </summary>
            <param name="childID">The ID of the child Entity to remove the reference of.</param>
            <param name="session">An optional session if using within a transaction</param>
            <param name="cancellation">An optional cancellation token</param>
        </member>
        <member name="M:MongoDB.Entities.Many`1.RemoveAsync(System.Collections.Generic.IEnumerable{`0},MongoDB.Driver.IClientSessionHandle,System.Threading.CancellationToken)">
            <summary>
            Removes child references.
            </summary>
            <param name="children">The child Entities to remove the references of.</param>
            <param name="session">An optional session if using within a transaction</param>
            <param name="cancellation">An optional cancellation token</param>
        </member>
        <member name="M:MongoDB.Entities.Many`1.RemoveAsync(System.Collections.Generic.IEnumerable{System.String},MongoDB.Driver.IClientSessionHandle,System.Threading.CancellationToken)">
            <summary>
            Removes child references.
            </summary>
            <param name="childIDs">The IDs of the child Entities to remove the references of</param>
            <param name="session">An optional session if using within a transaction</param>
            <param name="cancellation">An optional cancellation token</param>
        </member>
        <member name="T:MongoDB.Entities.Many`1.Joined`1">
            <summary>
            A class used to hold join results when joining relationships
            </summary>
            <typeparam name="T">The type of the resulting objects</typeparam>
        </member>
        <member name="T:MongoDB.Entities.One`1">
            <summary>
            Represents a one-to-one relationship with an IEntity.
            </summary>
            <typeparam name="T">Any type that implements IEntity</typeparam>
        </member>
        <member name="P:MongoDB.Entities.One`1.ID">
            <summary>
            The Id of the entity referenced by this instance.
            </summary>
        </member>
        <member name="M:MongoDB.Entities.One`1.#ctor(`0)">
            <summary>
            Initializes a reference to an entity in MongoDB.
            </summary>
            <param name="entity">The actual entity this reference represents.</param>
        </member>
        <member name="M:MongoDB.Entities.One`1.op_Implicit(System.String)~MongoDB.Entities.One{`0}">
            <summary>
            Operator for returning a new One&lt;T&gt; object from a string ID
            </summary>
            <param name="id">The ID to create a new One&lt;T&gt; with</param>
        </member>
        <member name="M:MongoDB.Entities.One`1.op_Implicit(`0)~MongoDB.Entities.One{`0}">
            <summary>
            Operator for returning a new One&lt;T&gt; object from an entity
            </summary>
            <param name="entity">The entity to make a reference to</param>
        </member>
        <member name="M:MongoDB.Entities.One`1.ToEntityAsync(MongoDB.Driver.IClientSessionHandle,System.Threading.CancellationToken)">
            <summary>
            Fetches the actual entity this reference represents from the database.
            </summary>
            <param name="session">An optional session</param>
            <param name="cancellation">An optional cancellation token</param>
            <returns>A Task containing the actual entity</returns>
        </member>
        <member name="M:MongoDB.Entities.One`1.ToEntityAsync(System.Linq.Expressions.Expression{System.Func{`0,`0}},MongoDB.Driver.IClientSessionHandle,System.Threading.CancellationToken)">
            <summary>
            Fetches the actual entity this reference represents from the database with a projection.
            </summary>
            <param name="projection">x => new Test { PropName = x.Prop }</param>
            <param name="session">An optional session if using within a transaction</param>
            <param name = "cancellation" > An optional cancellation token</param>
            <returns>A Task containing the actual projected entity</returns>
        </member>
        <member name="M:MongoDB.Entities.One`1.ToEntityAsync(System.Func{MongoDB.Driver.ProjectionDefinitionBuilder{`0},MongoDB.Driver.ProjectionDefinition{`0,`0}},MongoDB.Driver.IClientSessionHandle,System.Threading.CancellationToken)">
            <summary>
            Fetches the actual entity this reference represents from the database with a projection.
            </summary>
            <param name="projection">p=> p.Include("Prop1").Exclude("Prop2")</param>
            <param name="session">An optional session if using within a transaction</param>
            <param name = "cancellation" > An optional cancellation token</param>
            <returns>A Task containing the actual projected entity</returns>
        </member>
        <member name="T:MongoDB.Entities.Extensions">
            <summary>
            Extension methods for entities
            </summary>
        </member>
        <member name="M:MongoDB.Entities.Extensions.ToBatches``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
            Extension method for processing collections in batches with streaming (yield return)
            </summary>
            <typeparam name="T">The type of the objects inside the source collection</typeparam>
            <param name="collection">The source collection</param>
            <param name="batchSize">The size of each batch</param>
        </member>
        <member name="M:MongoDB.Entities.Extensions.Database``1(``0)">
            <summary>
            Gets the IMongoDatabase for the given entity type
            </summary>
            <typeparam name="T">The type of entity</typeparam>
        </member>
        <member name="M:MongoDB.Entities.Extensions.DatabaseName``1(``0)">
            <summary>
            Gets the name of the database this entity is attached to. Returns name of default database if not specifically attached.
            </summary>
        </member>
        <member name="M:MongoDB.Entities.Extensions.Collection``1(``0)">
            <summary>
            Gets the IMongoCollection for a given IEntity type.
            <para>TIP: Try never to use this unless really neccessary.</para>
            </summary>
            <typeparam name="T">Any class that implements IEntity</typeparam>
        </member>
        <member name="M:MongoDB.Entities.Extensions.CollectionName``1(``0)">
            <summary>
            Gets the collection name for this entity
            </summary>
        </member>
        <member name="M:MongoDB.Entities.Extensions.FullPath``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            Returns the full dotted path of a property for the given expression
            </summary>
            <typeparam name="T">Any class that implements IEntity</typeparam>
        </member>
        <member name="M:MongoDB.Entities.Extensions.Queryable``1(``0,MongoDB.Driver.AggregateOptions)">
            <summary>
            An IQueryable collection of sibling Entities.
            </summary>
        </member>
        <member name="M:MongoDB.Entities.Extensions.Fluent``1(``0,MongoDB.Driver.IClientSessionHandle,MongoDB.Driver.AggregateOptions)">
            <summary>
            An IAggregateFluent collection of sibling Entities.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="session">An optional session if using within a transaction</param>
            <param name="options">The options for the aggregation. This is not required.</param>
        </member>
        <member name="M:MongoDB.Entities.Extensions.Distinct``1(MongoDB.Driver.IAggregateFluent{``0})">
            <summary>
            Adds a distinct aggregation stage to a fluent pipeline.
            </summary>
            <typeparam name="T">Any class that implements IEntity</typeparam>
        </member>
        <member name="M:MongoDB.Entities.Extensions.Match``1(MongoDB.Driver.IAggregateFluent{``0},System.Func{MongoDB.Driver.FilterDefinitionBuilder{``0},MongoDB.Driver.FilterDefinition{``0}})">
            <summary>
            Appends a match stage to the pipeline with a filter expression
            </summary>
            <typeparam name="T">Any class that implements IEntity</typeparam>
            <param name="aggregate"></param>
            <param name="filter">f => f.Eq(x => x.Prop, Value) &amp; f.Gt(x => x.Prop, Value)</param>
        </member>
        <member name="M:MongoDB.Entities.Extensions.MatchExpression``1(MongoDB.Driver.IAggregateFluent{``0},System.String)">
            <summary>
            Appends a match stage to the pipeline with an aggregation expression (i.e. $expr)
            </summary>
            <typeparam name="T">Any class that implements IEntity</typeparam>
            <param name="aggregate"></param>
            <param name="expression">{ $gt: ['$Property1', '$Property2'] }</param>
        </member>
        <member name="M:MongoDB.Entities.Extensions.ToReference``1(``0)">
            <summary>
            Returns a reference to this entity.
            </summary>
        </member>
        <member name="M:MongoDB.Entities.Extensions.ToDocument``1(``0)">
            <summary>
            Creates an unlinked duplicate of the original IEntity ready for embedding with a blank ID.
            </summary>
        </member>
        <member name="M:MongoDB.Entities.Extensions.ToDocuments``1(``0[])">
            <summary>
            Creates unlinked duplicates of the original Entities ready for embedding with blank IDs.
            </summary>
        </member>
        <member name="M:MongoDB.Entities.Extensions.ToDocuments``1(System.Collections.Generic.IEnumerable{``0})">
             <summary>
            Creates unlinked duplicates of the original Entities ready for embedding with blank IDs.
             </summary>
        </member>
        <member name="M:MongoDB.Entities.Extensions.SaveAsync``1(``0,MongoDB.Driver.IClientSessionHandle,System.Threading.CancellationToken)">
            <summary>
            Saves a complete entity replacing an existing entity or creating a new one if it does not exist. 
            If ID value is null, a new entity is created. If ID has a value, then existing entity is replaced.
            </summary>
            <param name="session">An optional session if using within a transaction</param>
            <param name="cancellation">An optional cancellation token</param>
        </member>
        <member name="M:MongoDB.Entities.Extensions.SaveAsync``1(System.Collections.Generic.IEnumerable{``0},MongoDB.Driver.IClientSessionHandle,System.Threading.CancellationToken)">
            <summary>
            Saves a batch of complete entities replacing existing ones or creating new ones if they do not exist. 
            If ID value is null, a new entity is created. If ID has a value, then existing entity is replaced.
            </summary>
            <param name="session">An optional session if using within a transaction</param>
            <param name="cancellation">An optional cancellation token</param>
        </member>
        <member name="M:MongoDB.Entities.Extensions.SaveOnlyAsync``1(``0,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},MongoDB.Driver.IClientSessionHandle,System.Threading.CancellationToken)">
            <summary>
            Saves an entity partially with only the specified subset of properties. 
            If ID value is null, a new entity is created. If ID has a value, then existing entity is updated.
            <para>TIP: The properties to be saved can be specified with a 'New' expression. 
            You can only specify root level properties with the expression.</para>
            </summary>
            <typeparam name="T">Any class that implements IEntity</typeparam>
            <param name="entity">The entity to save</param>
            <param name="members">x => new { x.PropOne, x.PropTwo }</param>
            <param name="session">An optional session if using within a transaction</param>
            <param name="cancellation">An optional cancellation token</param>
        </member>
        <member name="M:MongoDB.Entities.Extensions.SaveOnlyAsync``1(System.Collections.Generic.IEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Object}},MongoDB.Driver.IClientSessionHandle,System.Threading.CancellationToken)">
            <summary>
            Saves a batch of entities partially with only the specified subset of properties. 
            If ID value is null, a new entity is created. If ID has a value, then existing entity is updated.
            <para>TIP: The properties to be saved can be specified with a 'New' expression. 
            You can only specify root level properties with the expression.</para>
            </summary>
            <typeparam name="T">Any class that implements IEntity</typeparam>
            <param name="entities">The batch of entities to save</param>
            <param name="members">x => new { x.PropOne, x.PropTwo }</param>
            <param name="session">An optional session if using within a transaction</param>
            <param name="cancellation">An optional cancellation token</param>
        </member>
        <member name="M:MongoDB.Entities.Extensions.SaveExceptAsync``1(``0,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},MongoDB.Driver.IClientSessionHandle,System.Threading.CancellationToken)">
            <summary>
            Saves an entity partially excluding the specified subset of properties. 
            If ID value is null, a new entity is created. If ID has a value, then existing entity is updated.
            <para>TIP: The properties to be excluded can be specified with a 'New' expression. 
            You can only specify root level properties with the expression.</para>
            </summary>
            <typeparam name="T">Any class that implements IEntity</typeparam>
            <param name="entity">The entity to save</param>
            <param name="members">x => new { x.PropOne, x.PropTwo }</param>
            <param name="session">An optional session if using within a transaction</param>
            <param name="cancellation">An optional cancellation token</param>
        </member>
        <member name="M:MongoDB.Entities.Extensions.SaveExceptAsync``1(System.Collections.Generic.IEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Object}},MongoDB.Driver.IClientSessionHandle,System.Threading.CancellationToken)">
            <summary>
            Saves a batch of entities partially excluding the specified subset of properties. 
            If ID value is null, a new entity is created. If ID has a value, then existing entity is updated.
            <para>TIP: The properties to be excluded can be specified with a 'New' expression. 
            You can only specify root level properties with the expression.</para>
            </summary>
            <typeparam name="T">Any class that implements IEntity</typeparam>
            <param name="entities">The batch of entities to save</param>
            <param name="members">x => new { x.PropOne, x.PropTwo }</param>
            <param name="session">An optional session if using within a transaction</param>
            <param name="cancellation">An optional cancellation token</param>
        </member>
        <member name="M:MongoDB.Entities.Extensions.SavePreservingAsync``1(``0,MongoDB.Driver.IClientSessionHandle,System.Threading.CancellationToken)">
            <summary>
            Saves an entity partially while excluding some properties. 
            The properties to be excluded can be specified using the [Preserve] attribute.
            </summary>
            <typeparam name="T">Any class that implements IEntity</typeparam>
            <param name="entity">The entity to save</param>
            <param name="cancellation">An optional cancellation token</param>
        </member>
        <member name="M:MongoDB.Entities.Extensions.DeleteAsync``1(``0,MongoDB.Driver.IClientSessionHandle)">
            <summary>
            Deletes a single entity from MongoDB.
            <para>HINT: If this entity is referenced by one-to-many/many-to-many relationships, those references are also deleted.</para>
            </summary>
        </member>
        <member name="M:MongoDB.Entities.Extensions.DeleteAllAsync``1(System.Collections.Generic.IEnumerable{``0},MongoDB.Driver.IClientSessionHandle)">
            <summary>
            Deletes multiple entities from the database
            <para>HINT: If these entities are referenced by one-to-many/many-to-many relationships, those references are also deleted.</para>
            </summary>
        </member>
        <member name="M:MongoDB.Entities.Extensions.SortByRelevance``1(System.Collections.Generic.IEnumerable{``0},System.String,System.Func{``0,System.String},System.Nullable{System.Int32})">
            <summary>
            Sort a list of objects by relevance to a given string using Levenshtein Distance
            </summary>
            <typeparam name="T">Any object type</typeparam>
            <param name="objects">The list of objects to sort</param>
            <param name="searchTerm">The term to measure relevance to</param>
            <param name="propertyToSortBy">x => x.PropertyName [the term will be matched against the value of this property]</param>
            <param name="maxDistance">The maximum levenstein distance to qualify an item for inclusion in the returned list</param>
        </member>
        <member name="M:MongoDB.Entities.Extensions.ToDoubleMetaphoneHash(System.String)">
            <summary>
            Converts a search term to Double Metaphone hash code suitable for fuzzy text searching.
            </summary>
            <param name="term">A single or multiple word search term</param>
        </member>
        <member name="M:MongoDB.Entities.Extensions.NextSequentialNumberAsync``1(``0)">
            <summary>
            Returns an atomically generated sequential number for the given Entity type everytime the method is called
            </summary>
            <typeparam name="T">The type of entity to get the next sequential number for</typeparam>
        </member>
        <member name="M:MongoDB.Entities.Extensions.InitOneToMany``1(MongoDB.Entities.IEntity,System.Linq.Expressions.Expression{System.Func{MongoDB.Entities.Many{``0}}})">
            <summary>
            Initializes supplied property with a new One-To-Many relationship.
            </summary>
            <param name="parent"></param>
            <param name="propertyToInit">() => PropertyName</param>
        </member>
        <member name="M:MongoDB.Entities.Extensions.InitManyToMany``1(MongoDB.Entities.IEntity,System.Linq.Expressions.Expression{System.Func{MongoDB.Entities.Many{``0}}},System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            Initializes supplied property with a new Many-To-Many relationship.
            </summary>
            <param name="parent"></param>
            <param name="propertyToInit">() = > PropertyName</param>
            <param name="propertyOtherSide">x => x.PropertyName</param>
        </member>
        <member name="T:MongoDB.Entities.Prop">
            <summary>
            This class provides methods to generate property path strings from lambda expression. 
            </summary>
        </member>
        <member name="M:MongoDB.Entities.Prop.Collection``1">
            <summary>
            Returns the collection/entity name of a given entity type
            </summary>
            <typeparam name="T">The type of the entity to get the collection name of</typeparam>
        </member>
        <member name="M:MongoDB.Entities.Prop.Property``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            Returns the name of the property for a given expression.
            <para>EX: Authors[0].Books[0].Title > Title</para>
            </summary>
            <param name="expression">x => x.SomeList[0].SomeProp</param>
        </member>
        <member name="M:MongoDB.Entities.Prop.Path``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            Returns the full dotted path for a given expression.
            <para>EX: Authors[0].Books[0].Title > Authors.Books.Title</para>
            </summary>
            <param name="expression">x => x.SomeList[0].SomeProp</param>
        </member>
        <member name="M:MongoDB.Entities.Prop.PosFiltered``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            Returns a path with filtered positional identifiers $[x] for a given expression.
            <para>EX: Authors[0].Name > Authors.$[a].Name</para>
            <para>EX: Authors[1].Age > Authors.$[b].Age</para>
            <para>EX: Authors[2].Books[3].Title > Authors.$[c].Books.$[d].Title</para>
            <para>TIP: Index positions start from [0] which is converted to $[a] and so on.</para>
            </summary>
            <param name="expression">x => x.SomeList[0].SomeProp</param>
        </member>
        <member name="M:MongoDB.Entities.Prop.PosAll``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            Returns a path with the all positional operator $[] for a given expression.
            <para>EX: Authors[0].Name > Authors.$[].Name</para>
            </summary>
            <param name="expression">x => x.SomeList[0].SomeProp</param>
        </member>
        <member name="M:MongoDB.Entities.Prop.PosFirst``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            Returns a path with the first positional operator $ for a given expression.
            <para>EX: Authors[0].Name > Authors.$.Name</para>
            </summary>
            <param name="expression">x => x.SomeList[0].SomeProp</param>
        </member>
        <member name="M:MongoDB.Entities.Prop.Elements``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            Returns a path without any filtered positional identifier prepended to it.
            <para>EX: b => b.Tags > Tags</para>
            </summary>
            <param name="expression">x => x.SomeProp</param>
        </member>
        <member name="M:MongoDB.Entities.Prop.Elements``1(System.Int32,System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            Returns a path with the filtered positional identifier prepended to the property path.
            <para>EX: 0, x => x.Rating > a.Rating</para>
            <para>EX: 1, x => x.Rating > b.Rating</para>
            <para>TIP: Index positions start from '0' which is converted to 'a' and so on.</para>
            </summary>
            <param name="index">0=a 1=b 2=c 3=d and so on...</param>
            <param name="expression">x => x.SomeProp</param>
        </member>
    </members>
</doc>
